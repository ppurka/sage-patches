# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1349619660 -28800
# Node ID dbc4c34445d8d882ed5d1a7ad5a405518b92b440
# Parent  1b1a2f0434bb3b8319fac8578f5669861a6a4a1e
add options marker and markeredgecolor to point2d

diff --git a/sage/plot/point.py b/sage/plot/point.py
--- a/sage/plot/point.py
+++ b/sage/plot/point.py
@@ -75,7 +75,7 @@
             sage: P[0].options()['alpha']
             1
         """
-        self.xdata = xdata 
+        self.xdata = xdata
         self.ydata = ydata
         GraphicPrimitive_xydata.__init__(self, options)
 
@@ -90,16 +90,18 @@
             'How big the point is (i.e., area in points^2=(1/72 inch)^2).'
         """
         return {'alpha':'How transparent the point is.',
+                'faceted': 'If True color the edge of the point. (only for 2D plots)',
+                'hue':'The color given as a hue.',
                 'legend_label':'The label for this item in the legend.',
+                'marker':'the marker symbol for 2D plots only (see documentation of plot for details)',
+                'markeredgecolor':'the color of the marker edge (only for 2D plots)',
+                'rgbcolor':'The color as an RGB tuple.',
                 'size': 'How big the point is (i.e., area in points^2=(1/72 inch)^2).',
-                'faceted': 'If True color the edge of the point.',
-                'rgbcolor':'The color as an RGB tuple.',
-                'hue':'The color given as a hue.',
                 'zorder':'The layer level in which to draw'}
 
     def _plot3d_options(self, options=None):
         """
-        Translate 2D plot options into 3D plot options. 
+        Translate 2D plot options into 3D plot options.
 
         EXAMPLES::
 
@@ -119,10 +121,12 @@
         if 'size' in options:
             options_3d['size'] = options['size']
             del options['size']
-        if 'faceted' in options:
-            if options['faceted']:
-                raise NotImplementedError, "No 3d faceted points."
-            del options['faceted']
+        if options.pop('faceted', False):
+            raise NotImplementedError("3D points can not be faceted.")
+        for o in ('marker', 'markeredgecolor'): # remove 2D options
+            if o in options:
+                del options[o]
+
         options_3d.update(GraphicPrimitive_xydata._plot3d_options(self, options))
         return options_3d
 
@@ -131,8 +135,8 @@
         Plots a two-dimensional point in 3-D, with default height zero.
 
         INPUT:
-    
-    
+
+
         -  ``z`` - optional 3D height above `xy`-plane.  May be a list
            if self is a list of points.
 
@@ -249,16 +253,16 @@
         r"""
         TESTS:
 
-        We check to make sure that \#2076 is fixed by verifying all
+        We check to make sure that :trac:`2076` is fixed by verifying all
         the points are red::
 
-            sage: point(((1,1), (2,2), (3,3)), rgbcolor=hue(1), size=30) 
+            sage: point(((1,1), (2,2), (3,3)), rgbcolor=hue(1), size=30)
         """
         options = self.options()
 
-        #Convert the color to a hex string so that the scatter 
+        #Convert the color to a hex string so that the scatter
         #method does not interpret it as a list of 3 floating
-        #point color specifications when there are 
+        #point color specifications when there are
         #three points. This is mentioned in the matplotlib 0.98
         #documentation and fixes \#2076
         from matplotlib.colors import rgb2hex
@@ -268,10 +272,19 @@
         z = int(options.pop('zorder', 0))
         s = int(options['size'])
         faceted = options['faceted'] #faceted=True colors the edge of point
+        markeredgecolor = options['markeredgecolor']
+
         scatteroptions={}
-        if not faceted: scatteroptions['edgecolors'] = 'none'
-        subplot.scatter(self.xdata, self.ydata, s=s, c=c, alpha=a, zorder=z, label=options['legend_label'], **scatteroptions)
-        
+        if not faceted and markeredgecolor is None:
+            scatteroptions['edgecolors'] = 'none'
+        elif markeredgecolor is not None:
+            scatteroptions['edgecolors'] = to_mpl_color(
+                                              options.pop('markeredgecolor'))
+        scatteroptions['marker'] = options.pop('marker')
+
+        subplot.scatter(self.xdata, self.ydata, s=s, c=c, alpha=a, zorder=z,
+                        label=options['legend_label'], **scatteroptions)
+
 
 def point(points, **kwds):
     """
@@ -312,7 +325,8 @@
         return point3d(points, **kwds)
 
 @rename_keyword(color='rgbcolor', pointsize='size')
-@options(alpha=1, size=10, faceted=False, rgbcolor=(0,0,1), legend_label=None, aspect_ratio='automatic')
+@options(alpha=1, aspect_ratio='automatic', faceted=False, legend_label=None,
+         marker='o', markeredgecolor=None, rgbcolor=(0,0,1), size=10)
 def point2d(points, **options):
     r"""
     A point of size ``size`` defined by point = `(x,y)`.
@@ -325,13 +339,17 @@
     A purple point from a single tuple or coordinates::
 
         sage: point((0.5, 0.5), rgbcolor=hue(0.75))
-        
+
+    Points with customized markers and edge colors::
+
+        sage: r = [(random(), random()) for _ in range(10)]
+        sage: point(r, marker='d', markeredgecolor='red', size=20)
+
     Passing an empty list returns an empty plot::
-        
+
         sage: point([])
 
-    If you need a 2D point to live in 3-space later, 
-    this is possible::
+    If you need a 2D point to live in 3-space later, this is possible::
 
         sage: A=point((1,1))
         sage: a=A[0];a
@@ -362,7 +380,7 @@
 
         sage: point([(1,2),(2,4),(3,4),(4,8),(4.5,32)],scale='semilogy',base=2)
 
-    Since Sage Version 4.4 (ticket #8599), the size of a 2d point can be
+    Since Sage Version 4.4 (:trac:`8599`), the size of a 2d point can be
     given by the argument ``size`` instead of ``pointsize``. The argument
     ``pointsize`` is still supported::
 
