# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1337533730 -28800
# Node ID fcbbe547cfd9ef630204a54763c595b1d3dd6da0
# Parent  b6bb53fd456653d8dd6db394da1bde4bba9559d6
 - add some examples for log scale to other user facing functions
 - also add a minor check in parametric_plot
 - finally add loglog_*, semilogx_*, semilogy_* plots

diff --git a/sage/plot/all.py b/sage/plot/all.py
--- a/sage/plot/all.py
+++ b/sage/plot/all.py
@@ -1,5 +1,7 @@
 from graphics import show_default, Graphics, is_Graphics
 from plot import plot, graphics_array, list_plot, parametric_plot, polar_plot
+from plot import plot_loglog, plot_semilogx, plot_semilogy
+from plot import list_plot_loglog, list_plot_semilogx, list_plot_semilogy
 from line import line, line2d
 from arrow import arrow, arrow2d
 from bar_chart import bar_chart
diff --git a/sage/plot/contour_plot.py b/sage/plot/contour_plot.py
--- a/sage/plot/contour_plot.py
+++ b/sage/plot/contour_plot.py
@@ -526,6 +526,24 @@
 
     - ``legend_label`` -- the label for this item in the legend
 
+    - ``base`` - (default: 10) the base of the logarithm if
+      a logarithmic scale is set. This must be greater than 1. The base
+      can be also given as a list or tuple ``(basex, basey)``.
+      ``basex`` sets the base of the logarithm along the horizontal
+      axis and ``basey`` sets the base along the vertical axis.
+
+    - ``scale`` -- (default: `linear`) string. The scale of the axes.
+      Possible values are `linear`, `loglog`, `semilogx`, `semilogy`.
+
+      The scale can be also be given as single argument that is a list
+      or tuple ``(scale, base)`` or ``(scale, basex, basey)``.
+
+      The `loglog` scale sets both the horizontal and vertical axes to
+      logarithmic scale. The `semilogx` scale sets the horizontal axis
+      to logarithmic scale. The `semilogy` scale sets the vertical axis
+      to logarithmic scale. The `linear` scale is the default value
+      when :class:`Graphics` is initialized.
+
     EXAMPLES:
 
     A simple circle with a radius of 2. Note that
@@ -605,6 +623,10 @@
 
         sage: implicit_plot(lambda x,y: x^2+y^2-2, (x,-3,3), (y,-3,3), fill=True, plot_points=500) # long time
 
+    An example of an implicit plot on 'loglog' scale::
+
+        sage: implicit_plot(x^2+y^2 == 200, (x,1,200), (y,1,200), scale='loglog')
+
     TESTS::
 
         sage: f(x,y) = x^2 + y^2 - 2
@@ -683,6 +705,24 @@
 
     - ``legend_label`` -- the label for this item in the legend
 
+    - ``base`` - (default: 10) the base of the logarithm if
+      a logarithmic scale is set. This must be greater than 1. The base
+      can be also given as a list or tuple ``(basex, basey)``.
+      ``basex`` sets the base of the logarithm along the horizontal
+      axis and ``basey`` sets the base along the vertical axis.
+
+    - ``scale`` -- (default: `linear`) string. The scale of the axes.
+      Possible values are `linear`, `loglog`, `semilogx`, `semilogy`.
+
+      The scale can be also be given as single argument that is a list
+      or tuple ``(scale, base)`` or ``(scale, basex, basey)``.
+
+      The `loglog` scale sets both the horizontal and vertical axes to
+      logarithmic scale. The `semilogx` scale sets the horizontal axis
+      to logarithmic scale. The `semilogy` scale sets the vertical axis
+      to logarithmic scale. The `linear` scale is the default value
+      when :class:`Graphics` is initialized.
+
 
     EXAMPLES:
 
@@ -742,6 +782,10 @@
 
         sage: region_plot(s>0,(s,-2,2),(t,-2,2))
 
+    An example of a region plot in 'loglog' scale::
+
+        sage: region_plot(x^2+y^2<100, (x,1,10), (y,1,10), scale='loglog')
+
     """
 
     from sage.plot.all import Graphics
diff --git a/sage/plot/plot.py b/sage/plot/plot.py
--- a/sage/plot/plot.py
+++ b/sage/plot/plot.py
@@ -591,6 +591,24 @@
       documentation further below for more information, starting at "the
       algorithm used to insert".
 
+    - ``base`` - (default: 10) the base of the logarithm if
+      a logarithmic scale is set. This must be greater than 1. The base
+      can be also given as a list or tuple ``(basex, basey)``.
+      ``basex`` sets the base of the logarithm along the horizontal
+      axis and ``basey`` sets the base along the vertical axis.
+
+    - ``scale`` -- (default: `linear`) string. The scale of the axes.
+      Possible values are `linear`, `loglog`, `semilogx`, `semilogy`.
+
+      The scale can be also be given as single argument that is a list
+      or tuple ``(scale, base)`` or ``(scale, basex, basey)``.
+
+      The `loglog` scale sets both the horizontal and vertical axes to
+      logarithmic scale. The `semilogx` scale sets the horizontal axis
+      to logarithmic scale. The `semilogy` scale sets the vertical axis
+      to logarithmic scale. The `linear` scale is the default value
+      when :class:`~sage.graphics.Graphics` is initialized.
+
     - ``xmin`` - starting x value
 
     - ``xmax`` - ending x value
@@ -779,6 +797,23 @@
 
         sage: plot(sin(1/x), (-1, 1))
 
+    Plotting in logarithmic scale is possible for 2D plots.  There
+    are two different syntaxes supported::
+
+        sage: plot(exp, (1, 10), scale='semilogy') # log axis on vertical
+
+        sage: plot_semilogy(exp, (1, 10)) # same thing
+
+        sage: plot_loglog(exp, (1, 10), scale='loglog')   # both axes are log
+
+        sage: plot(exp, (1, 10), scale='loglog', base=2) # base of log is 2
+
+    We can also change the scale of the axes in the graphics just before
+    displaying::
+
+        sage: G = plot(exp, 1, 10)
+        sage: G.show(scale=('semilogy', 2))
+
     The algorithm used to insert extra points is actually pretty
     simple. On the picture drawn by the lines below::
 
@@ -1360,6 +1395,21 @@
         sage: parametric_plot( vector((sin(t), sin(2*t))), (t, 0, 2*pi), color='green')
         sage: parametric_plot( vector([t, t+1, t^2]), (t, 0, 1))
 
+    Plotting in logarithmic scale is possible with 2D plots. The keyword
+    ``aspect_ratio`` will be ignored if the scale is not `loglog` or
+    `linear`.::
+
+        sage: parametric_plot((x, x**2), (x, 1, 10), scale='loglog')
+
+    We can also change the scale of the axes in the graphics just before
+    displaying. In this case, the ``aspect_ratio`` must be specified as
+    `automatic` if the ``scale`` is set to `semilogx` or `semilogy`. For
+    other values of the ``scale`` parameter, any ``aspect_ratio`` can be
+    used, or the keyword need not be provided.::
+
+        sage: p = parametric_plot((x, x**2), (x, 1, 10))
+        sage: p.show(scale='semilogy', aspect_ratio='automatic')
+
     TESTS::
 
         sage: parametric_plot((x, t^2), (x, -4, 4))
@@ -1406,6 +1456,12 @@
     if num_vars>num_ranges:
         raise ValueError, "there are more variables than variable ranges"
 
+    # Reset aspect_ratio to 'automatic' in case scale is 'semilog[xy]'.
+    # Otherwise matplotlib complains.
+    scale = kwargs.get('scale', None)
+    if scale == 'semilogy' or scale == 'semilogx':
+        kwargs['aspect_ratio'] = 'automatic'
+
     if num_funcs == 2 and num_ranges == 1:
         kwargs['parametric'] = True
         return plot(funcs, *args, **kwargs)
@@ -1547,6 +1603,21 @@
 
         sage: list_plot({22: 3365, 27: 3295, 37: 3135, 42: 3020, 47: 2880, 52: 2735, 57: 2550})
 
+    Plotting in logarithmic scale is possible for 2D plots.::
+
+        sage: yl = [2**k for k in range(10)]
+        sage: list_plot(yl, scale='semilogy')       # log axis on vertical
+
+        sage: list_plot(yl, scale='loglog')         # both axes are log
+
+        sage: list_plot(yl, scale='loglog', base=2) # base of log is 2
+
+    We can also change the scale of the axes in the graphics just before
+    displaying::
+
+        sage: G = list_plot(yl)
+        sage: G.show(scale=('semilogy', 2))
+
     TESTS:
 
     We check to see that the x/y min/max data are set correctly.
@@ -1592,6 +1663,156 @@
         else:
             return point(data, **kwargs)
 
+#------------------------ Graphs on log scale ---------------------------#
+@options(base=10)
+def plot_loglog(funcs, *args, **kwds):
+    """
+    Plot graphics in 'loglog' scale, that is, both the horizontal and the
+    vertical axes will be in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1. The base can be also given as a list or tuple
+      ``(basex, basey)``.  ``basex`` sets the base of the logarithm along the
+      horizontal axis and ``basey`` sets the base along the vertical axis.
+
+    - ``funcs`` -- any Sage object which is acceptable to the :func:`plot`.
+
+    For all other inputs, look at the documentation of :func:`plot`.
+
+    EXAMPLES::
+
+        sage: plot_loglog(exp, (1,10)) # plot in loglog scale with base 10
+
+        sage: plot_loglog(exp, (1,10), base=2) # with base 2 on both axes
+
+        sage: plot_loglog(exp, (1,10), base=(2,3))
+
+    """
+    return plot(funcs, *args, scale='loglog', **kwds)
+
+@options(base=10)
+def plot_semilogx(funcs, *args, **kwds):
+    """
+    Plot graphics in 'semilogx' scale, that is, the horizontal axis will be
+    in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1.
+
+    - ``funcs`` -- any Sage object which is acceptable to the :func:`plot`.
+
+    For all other inputs, look at the documentation of :func:`plot`.
+
+    EXAMPLES::
+
+        sage: plot_semilogx(exp, (1,10)) # plot in semilogx scale, base 10
+
+        sage: plot_semilogx(exp, (1,10), base=2) # with base 2
+
+    """
+    return plot(funcs, *args, scale='semilogx', **kwds)
+
+@options(base=10)
+def plot_semilogy(funcs, *args, **kwds):
+    """
+    Plot graphics in 'semilogy' scale, that is, the vertical axis will be
+    in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1.
+
+    - ``funcs`` -- any Sage object which is acceptable to the :func:`plot`.
+
+    For all other inputs, look at the documentation of :func:`plot`.
+
+    EXAMPLES::
+
+        sage: plot_semilogy(exp, (1,10)) # plot in semilogy scale, base 10
+
+        sage: plot_semilogy(exp, (1,10), base=2) # with base 2
+
+    """
+    return plot(funcs, *args, scale='semilogy', **kwds)
+
+@options(base=10)
+def list_plot_loglog(data, plotjoined=False, **kwds):
+    """
+    Plot the `data` in 'loglog' scale, that is, both the horizontal and the
+    vertical axes will be in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1. The base can be also given as a list or tuple
+      ``(basex, basey)``.  ``basex`` sets the base of the logarithm along the
+      horizontal axis and ``basey`` sets the base along the vertical axis.
+
+    For all other inputs, look at the documentation of :func:`list_plot`.
+
+    EXAMPLES::
+
+        sage: yl = [5**k for k in range(10)]; xl = [2**k for k in range(10)]
+        sage: list_plot_loglog(zip(xl, yl)) # plot in loglog scale with base 10
+
+        sage: list_plot_loglog(zip(xl, yl), base=2) # with base 2 on both axes
+
+        sage: list_plot_loglog(zip(xl, yl), base=(2,5))
+
+    """
+    return list_plot(data, plotjoined=plotjoined, scale='loglog', **kwds)
+
+@options(base=10)
+def list_plot_semilogx(data, plotjoined=False, **kwds):
+    """
+    Plot `data` in 'semilogx' scale, that is, the horizontal axis will be
+    in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1.
+
+    For all other inputs, look at the documentation of :func:`plot`.
+
+    EXAMPLES::
+
+        sage: yl = [5**k for k in range(10)]
+        sage: list_plot_semilogx(yl) # plot in semilogx scale, base 10
+
+        sage: list_plot_semilogx(yl, base=2) # with base 2
+
+    """
+    return list_plot(data, plotjoined=plotjoined, scale='semilogx', **kwds)
+
+@options(base=10)
+def list_plot_semilogy(data, plotjoined=False, **kwds):
+    """
+    Plot `data` in 'semilogy' scale, that is, the vertical axis will be
+    in logarithmic scale.
+
+    INPUTS:
+
+    - ``base`` -- (default: 10) the base of the logarithm. This must be
+      greater than 1.
+
+    For all other inputs, look at the documentation of :func:`plot`.
+
+    EXAMPLES::
+
+        sage: yl = [5**k for k in range(10)]
+        sage: list_plot_semilogy(yl) # plot in semilogy scale, base 10
+
+        sage: list_plot_semilogy(yl, base=5) # with base 5
+
+    """
+    return list_plot(data, plotjoined=plotjoined, scale='semilogy', **kwds)
+
 def to_float_list(v):
     """
     Given a list or tuple or iterable v, coerce each element of v to a
