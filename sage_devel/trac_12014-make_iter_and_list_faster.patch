# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1321087218 -28800
# Node ID c26aeb64b77e00ba38533058460e1ec541404aef
# Parent  58808b220c2a9fb6f0d83151c4f30d25779b4e35
make __iter__() and list() faster and fix inconsistent output between iter(code) and code.list()

diff --git a/sage/coding/linear_code.py b/sage/coding/linear_code.py
--- a/sage/coding/linear_code.py
+++ b/sage/coding/linear_code.py
@@ -802,16 +802,22 @@
             sage: [list(c) for c in C if hamming_weight(c) < 4]
              [[0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 0, 1], [0, 0, 1, 0, 1, 1, 0], [1, 1, 1, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0], [0, 0, 1, 1, 0, 0, 1]]
         """
-        n = self.length()
-        k = self.dimension()
         F = self.base_ring()
-        Cs,p = self.standard_form()
-        Gs = Cs.gen_mat()
-        V = VectorSpace(F,k)
-        MS = MatrixSpace(F,n,n)
-        perm_mat = MS(p.matrix().rows())**(-1)
-        for v in V:
-            yield (v*Gs)*perm_mat
+        G = self.gen_mat()
+        def _iterate(G, F):
+            # if G is a matrix and v is a vector, then we do v*G and make
+            # sure that the multiplication v[i]*G[i] happens only once for
+            # a fixed value of v[i]
+            g = G[0]
+            if G.nrows() == 1:
+                for b in F:
+                    yield b*g
+            else:
+                for rest in _iterate(G[1:], F):
+                    for b in F:
+                        yield rest + b*g
+
+        return _iterate(G, F)
 
     def ambient_space(self):
         r"""
@@ -1806,7 +1812,7 @@
             (1, 0, 1, 0, 1, 0, 1)
             True
         """
-        return self.gen_mat().row_space().list()
+        return list(self.__iter__())
 
     def _magma_init_(self, magma):
         r"""
