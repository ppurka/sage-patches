# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1337533475 -28800
# Node ID fa6385e572d44e1ba135efd4920ffff8afe33e4e
# Parent  d980750cc2b4ed5f3605383ffc8b7effd7d4d70f
add log scale to Graphics class

diff --git a/sage/plot/graphics.py b/sage/plot/graphics.py
--- a/sage/plot/graphics.py
+++ b/sage/plot/graphics.py
@@ -9,6 +9,7 @@
 AUTHORS:
 
 - Jeroen Demeyer (2012-04-19): split off this file from plot.py (:trac:`12857`)
+- Punarbasu Purkayastha (2012-05-20): Add logarithmic scale (:trac:`4529`)
 
 """
 
@@ -117,6 +118,12 @@
         ...        G+=line(l,color=hue(c + p*(x/h)))
         sage: G.show(figsize=[5,5])
 
+    We can change the scale of the axes in the graphics before displaying::
+
+        sage: G = plot(exp, 1, 10)
+        sage: G.set_scale('semilogy')
+        sage: G.show()
+
     TESTS:
 
     From :trac:`4604`, ensure Graphics can handle 3d objects::
@@ -150,6 +157,8 @@
         self._axes_color = (0, 0, 0)
         self._axes_label_color = (0, 0, 0)
         self._axes_width = 0.8
+        self._basex = 10
+        self._basey = 10
         self._bbox_extra_artists = []
         self._extra_kwds = {}
         self._fontsize = 10
@@ -158,6 +167,8 @@
         self._show_axes = True
         self._show_legend = False
         self._tick_label_color = (0, 0, 0)
+        self._xscale = 'linear'
+        self._yscale = 'linear'
 
     def set_aspect_ratio(self, ratio):
         """
@@ -389,6 +400,296 @@
         else:
             self._legend_opts.update(kwds)
 
+    def get_scale(self):
+        """
+        Get the current axes scale.
+
+        OUTPUT:
+        The output is a tuple ``(scale, basex, basey)``. ``scale`` takes
+        values
+        - ``linear`` -- both the axes are linear.
+        - ``loglog`` -- both the axes are logarithmic.
+        - ``semilogx`` -- the horizontal axis is logarithmic and the
+          vertical axis is linear.
+        - ``semilogy`` -- the horizontal axis is linear and the vertical
+          axis is logarithmic.
+
+        ``basex``, ``basey`` are scalars greater than 1. When the
+        horizontal or vertical axis has linear scale, then the
+        corresponding base has no significance and defaults to 10.
+
+        EXAMPLES::
+
+            sage: p = Graphics(); p.get_scale()
+            ('linear', 10, 10)
+            sage: p.set_scale('loglog'); p.get_scale()
+            ('loglog', 10, 10)
+            sage: p.set_scale(('semilogx', 2)); p.get_scale()
+            ('semilogx', 2, 10)
+        """
+        if self._xscale == 'linear' and self._yscale == 'linear':
+            return ('linear', self._basex, self._basey)
+        if self._xscale == 'log' and self._yscale == 'log':
+            return ('loglog', self._basex, self._basey)
+        if self._xscale == 'log' and self._yscale == 'linear':
+            return ('semilogx', self._basex, self._basey)
+        if self._xscale == 'linear' and self._yscale == 'log':
+            return ('semilogy', self._basex, self._basey)
+
+    def get_xscale(self):
+        """
+        Get the current horizontal axis scale.
+
+        OUTPUT:
+        The output is a tuple ``(scale, base)``. ``scale`` takes
+        values
+        - ``linear`` -- the axis is linear.
+        - ``log`` -- the axis is logarithmic.
+
+        ``base`` is a scalar greater than 1. When the horizontal axis has
+        linear scale, then the corresponding base has no significance and
+        defaults to 10.
+
+        EXAMPLES::
+
+            sage: p = Graphics(); p.get_xscale()
+            ('linear', 10)
+            sage: p.set_scale('loglog'); p.get_xscale()
+            ('log', 10)
+            sage: p.set_scale(('semilogx', 2)); p.get_xscale()
+            ('log', 2)
+        """
+        return (self._xscale, self._basex)
+
+    def get_yscale(self):
+        """
+        Get the current vertical axis scale.
+
+        OUTPUT:
+        The output is a tuple ``(scale, base)``. ``scale`` takes
+        values
+        - ``linear`` -- the axis is linear.
+        - ``log`` -- the axis is logarithmic.
+
+        ``base`` is a scalar greater than 1. When the vertical axis has
+        linear scale, then the corresponding base has no significance and
+        defaults to 10.
+
+        EXAMPLES::
+
+            sage: p = Graphics(); p.get_yscale()
+            ('linear', 10)
+            sage: p.set_scale('loglog'); p.get_yscale()
+            ('log', 10)
+            sage: p.set_scale(('semilogy', 2)); p.get_yscale()
+            ('log', 2)
+        """
+        return (self._yscale, self._basey)
+
+    def set_scale(self, scale, base=10):
+        """
+        Set the scale of both the axes of this graphics object.
+
+        INPUT:
+
+        - ``scale`` -- string. The scale of the axes. Possible values are
+          `linear`, `loglog`, `semilogx`, `semilogy`.
+
+        - ``base`` -- (Default: 10) the base of the logarithm if
+          a logarithmic scale is set. This must be greater than 1. The base
+          can be also given as a list or tuple ``(basex, basey)``.
+          ``basex`` sets the base of the logarithm along the horizontal
+          axis and ``basey`` sets the base along the vertical axis.
+
+        The INPUT can be also be given as single argument that is a list or
+        tuple ``(scale, base)`` or ``(scale, basex, basey)``.
+
+        The `loglog` scale sets both the horizontal and vertical axes to
+        logarithmic scale. The `semilogx` scale sets the horizontal axis to
+        logarithmic scale. The `semilogy` scale sets the vertical axis to
+        logarithmic scale. The `linear` scale is the default value when
+        :class:`Graphics` is initialized.
+
+        IMPORTANT: This parameter sets the scale of all the graphics
+        primitives in this graphics object. If you try to add two graphics
+        objects with different scales, you will get an error.
+
+        EXAMPLES::
+
+            sage: p = Graphics()
+            sage: p.set_scale('loglog'); p.get_scale()
+            ('loglog', 10, 10)
+            sage: p.set_scale(('semilogx', 2)); p.get_scale()
+            ('semilogx', 2, 10)
+            sage: p.set_scale(('semilogy', 2, 3)); p.get_scale()
+            ('semilogy', 10, 3)
+
+        TESTS::
+
+            sage: p = Graphics()
+            sage: p.set_scale('log')
+            Traceback (most recent call last):
+            ...
+            ValueError: The scale must be one of 'linear', 'loglog', 'semilogx' or 'semilogy' -- got log
+            sage: p.set_scale(('loglog', 1))
+            Traceback (most recent call last):
+            ...
+            ValueError: The base of the logarithm must be greater than 1
+        """
+        if isinstance(scale, (list, tuple)):
+            if len(scale) != 2 and len(scale) != 3:
+                raise ValueError("If the input is a tuple, it must be of "
+                    "the form (scale, base) or (scale, basex, basey)")
+            if len(scale) == 2:
+                base = scale[1]
+            else:
+                base = scale[1:]
+            scale = scale[0]
+
+        if scale not in ('linear', 'loglog', 'semilogx', 'semilogy'):
+            raise ValueError("The scale must be one of 'linear', 'loglog',"
+                    " 'semilogx' or 'semilogy' -- got {0}".format(scale))
+        if isinstance(base, (list, tuple)):
+            basex, basey = base
+        else:
+            basex = basey = base
+
+        if basex <= 1 or basey <= 1:
+            raise ValueError("The base of the logarithm must be greater "
+                             "than 1")
+
+        if scale == 'linear':
+            self.set_xscale('linear')
+            self.set_yscale('linear')
+        elif scale == 'loglog':
+            self.set_xscale('log', base=basex)
+            self.set_yscale('log', base=basey)
+        elif scale == 'semilogx':
+            self.set_xscale('log', base=basex)
+            self.set_yscale('linear')
+        elif scale == 'semilogy':
+            self.set_xscale('linear')
+            self.set_yscale('log', base=basey)
+
+    def set_xscale(self, scale, base=10):
+        """
+        Set the scale along the horizontal axis.
+
+        INPUT:
+
+        - ``scale`` -- string. The scale of the horizontal axes. Possible
+          values are `linear`, `log`.
+
+        - ``base`` -- (Default: 10) the base of the logarithm if
+          a logarithmic scale is set. This must be greater than 1.
+
+        The INPUT can be also be given as single argument that is a list or
+        tuple ``(scale, base)``. If the scale is given as `linear`, then
+        the ``base`` is set to `10` irrespective of the input given.
+
+        IMPORTANT: This parameter sets the scale of all the graphics
+        primitives in this graphics object. If you try to add two graphics
+        objects with different scales, you will get an error.
+
+        EXAMPLES::
+
+            sage: p = Graphics()
+            sage: p.set_xscale('log'); p.get_xscale()
+            ('log', 10)
+            sage: p.set_xscale(('log', 2)); p.get_xscale()
+            ('log', 2)
+            sage: p.set_xscale(['linear', 1]); p.get_xscale()
+            ('linear', 10)
+
+        TESTS::
+
+            sage: p = Graphics()
+            sage: p.set_xscale('loglog')
+            Traceback (most recent call last):
+            ...
+            ValueError: The scale must be one of 'linear', 'log'
+            sage: p.set_xscale(('log', 2, 3))
+            Traceback (most recent call last):
+            ...
+            ValueError: If the input is a tuple, it must be of the form (scale, base)
+        """
+        if isinstance(scale, (list, tuple)):
+            if len(scale) != 2:
+                raise ValueError("If the input is a tuple, it must be of "
+                                 "the form (scale, base)")
+            base  = scale[1]
+            scale = scale[0]
+
+        if scale not in ('linear', 'log'):
+            raise ValueError("The scale must be one of 'linear', 'log'")
+        if scale == 'log':
+            if base <= 1:
+                raise ValueError("The base of the logarithm must be greater "
+                                 "than 1")
+            self._basex = base
+        else:
+            self._basex = 10
+        self._xscale = scale
+
+    def set_yscale(self, scale, base=10):
+        """
+        Set the scale along the vertical axis.
+
+        INPUT:
+
+        - ``scale`` -- string. The scale of the vertical axes. Possible
+          values are `linear`, `log`.
+
+        - ``base`` -- (Default: 10) the base of the logarithm if
+          a logarithmic scale is set. This must be greater than 1.
+
+        The INPUT can be also be given as single argument that is a list or
+        tuple ``(scale, base)``. If the scale is given as `linear`, then
+        the ``base`` is set to `10` irrespective of the input given.
+
+        IMPORTANT: This parameter sets the scale of all the graphics
+        primitives in this graphics object. If you try to add two graphics
+        objects with different scales, you will get an error.
+
+        EXAMPLES::
+
+            sage: p = Graphics()
+            sage: p.set_yscale('log'); p.get_yscale()
+            ('log', 10)
+            sage: p.set_yscale(['log', 2]); p.get_yscale()
+            ('log', 2)
+            sage: p.set_yscale('linear', 1); p.get_yscale()
+            ('linear', 10)
+
+        TESTS::
+
+            sage: p = Graphics()
+            sage: p.set_yscale('loglog')
+            Traceback (most recent call last):
+            ...
+            ValueError: The scale must be one of 'linear', 'log'
+            sage: p.set_yscale(('log', 2, 3))
+            Traceback (most recent call last):
+            ...
+            ValueError: If the input is a tuple, it must be of the form (scale, base)
+        """
+        if isinstance(scale, (list, tuple)):
+            if len(scale) != 2:
+                raise ValueError("If the input is a tuple, it must be of "
+                                 "the form (scale, base)")
+            base  = scale[1]
+            scale = scale[0]
+
+        if scale not in ('linear', 'log'):
+            raise ValueError("The scale must be one of 'linear', 'log'")
+        if scale == 'log':
+            if base <= 1:
+                raise ValueError("The base of the logarithm must be greater "
+                                 "than 1")
+            self._basey = base
+        else:
+            self._basey = 10
+        self._yscale = scale
 
     def get_axes_range(self):
         """
@@ -839,18 +1140,29 @@
             [Graphics object consisting of 1 graphics primitive,
              Graphics object consisting of 1 graphics primitive]
 
+        If the graphics are in logarithmic scale, then the scale is also
+        mentioned::
+
+            sage: p = plot(x); p.set_xscale('log')
+            sage: q = plot(x**2); q.set_xscale('log')
+            sage: (p+q).__str__()
+            'Graphics object consisting of 2 graphics primitives in semilogx scale'
+
         ::
 
             sage: show_default(True)
         """
-        pr, i = '', 0
-        for x in self:
-            pr += '\n\t%s -- %s'%(i, x)
-            i += 1
         s = "Graphics object consisting of %s graphics primitives"%(len(self))
         if len(self) == 1:
             s = s[:-1]
-        return s
+        t = ""
+        if self._xscale == 'log' and self._yscale == 'log':
+            t = " in loglog scale"
+        elif self._xscale == 'log':
+            t = " in semilogx scale"
+        elif self._yscale == 'log':
+            t = " in semilogy scale"
+        return s+t
 
     def __getitem__(self, i):
         """
@@ -983,14 +1295,31 @@
             sage: g2.set_aspect_ratio(3)
             sage: (g1+g2).aspect_ratio()
             3.0
+
+        Graphics of different scales can not be added::
+
+            sage: p = plot(exp, 1, 10); p.set_scale('loglog')
+            sage: q = plot(x, 1, 10)
+            sage: p + q
+            Traceback (most recent call last):
+            ...
+            TypeError: Both the Graphics objects must have the same scale and the same base for the logarithms
         """
         if isinstance(other, int) and other == 0:
             return self
+
         if not isinstance(other, Graphics):
             from sage.plot.plot3d.base import Graphics3d
             if isinstance(other, Graphics3d):
                 return self.plot3d() + other
-            raise TypeError, "other (=%s) must be a Graphics objects"%other
+            raise TypeError("other (={0}) must be a Graphics object".format(other))
+        
+        # If we have come here, then other is a Graphics object, which
+        # means it has got the _[xy]scale and _base[xy] attributes.
+        if self._xscale != other._xscale or self._yscale != other._yscale \
+            or self._basex != other._basex or self._basey != other._basey:
+            raise TypeError("Both the Graphics objects must have the same "
+                            "scale and the same base for the logarithms")
         g = Graphics()
         g._objects = self._objects + other._objects
         g._show_legend = self._show_legend or other._show_legend
@@ -1001,7 +1330,9 @@
         elif other.aspect_ratio()=='automatic':
             g.set_aspect_ratio(self.aspect_ratio())
         else:
-            g.set_aspect_ratio( max(self.aspect_ratio(), other.aspect_ratio()))
+            g.set_aspect_ratio(max(self.aspect_ratio(), other.aspect_ratio()))
+        g.set_xscale(self.get_xscale())
+        g.set_yscale(self.get_yscale())
         return g
 
     def add_primitive(self, primitive):
@@ -1107,11 +1438,11 @@
     # this dictionary to contain the default value for that parameter.
 
     SHOW_OPTIONS = dict(aspect_ratio=None, axes=None, axes_labels=None,
-                        axes_pad=.02, dpi=DEFAULT_DPI,
+                        axes_pad=.02, base=None, dpi=DEFAULT_DPI,
                         fig_tight=True, figsize=None, filename=None,
                         fontsize=None, frame=False,
                         gridlines=None, gridlinesstyle=None,
-                        hgridlinesstyle=None, legend_options={},
+                        hgridlinesstyle=None, legend_options={}, scale=None,
                         show_legend=None, tick_formatter=None, ticks=None,
                         ticks_integer=False, transparent=False,
                         xmin=None, xmax=None, ymin=None, ymax=None,
@@ -1269,6 +1600,24 @@
 
         - ``legend_*`` - all the options valid for :meth:`set_legend_options` prefixed with ``legend_``
 
+        - ``base`` - (default: 10) the base of the logarithm if
+          a logarithmic scale is set. This must be greater than 1. The base
+          can be also given as a list or tuple ``(basex, basey)``.
+          ``basex`` sets the base of the logarithm along the horizontal
+          axis and ``basey`` sets the base along the vertical axis.
+
+        - ``scale`` -- (default: `linear`) string. The scale of the axes.
+          Possible values are `linear`, `loglog`, `semilogx`, `semilogy`.
+
+          The scale can be also be given as single argument that is a list
+          or tuple ``(scale, base)`` or ``(scale, basex, basey)``.
+
+          The `loglog` scale sets both the horizontal and vertical axes to
+          logarithmic scale. The `semilogx` scale sets the horizontal axis
+          to logarithmic scale. The `semilogy` scale sets the vertical axis
+          to logarithmic scale. The `linear` scale is the default value
+          when :class:`Graphics` is initialized.
+
         EXAMPLES::
 
             sage: c = circle((1,1), 1, color='red')
@@ -1295,6 +1644,12 @@
 
             sage: plot(sin(x), (x, -4, 4), transparent=True)
 
+        We can change the scale of the axes in the graphics before
+        displaying::
+
+            sage: G = plot(exp, 1, 10)
+            sage: G.show(scale=('semilogy', 2))
+
         Add grid lines at the major ticks of the axes.
 
         ::
@@ -1606,24 +1961,41 @@
         return {'xmin':xmin, 'xmax':xmax, 'ymin':ymin, 'ymax':ymax}
 
     def _matplotlib_tick_formatter(self, subplot, locator_options={},
-            tick_formatter=None, ticks=None, xmax=None, xmin=None,
-            ymax=None, ymin=None):
+            tick_formatter=(None, None), ticks=(None, None),
+            xmax=None, xmin=None, ymax=None, ymin=None):
         r"""
         Take a matplotlib subplot instance representing the graphic and set
         the ticks formatting. This function is only for internal use.
 
         INPUT:
         - ``subplot`` -- the subplot instance.
+
+        EXAMPLES::
+
+            sage: from matplotlib.figure import Figure
+            sage: p = plot(x); d = p.get_minmax_data()
+            sage: subplot = Figure().add_subplot(111)
+            sage: p._objects[0]._render_on_subplot(subplot)
+            sage: p._matplotlib_tick_formatter(subplot, **d)
+            (<matplotlib.axes.AxesSubplot object at ...>,
+            <matplotlib.ticker.MaxNLocator instance at ...>,
+            <matplotlib.ticker.MaxNLocator instance at ...>,
+            <matplotlib.ticker.OldScalarFormatter instance at ...>,
+            <matplotlib.ticker.OldScalarFormatter instance at ...>)
         """
         # This function is created to refactor some code that is repeated
         # in the matplotlib function
-        from matplotlib.ticker import FixedLocator, Locator, MaxNLocator, \
-                MultipleLocator, NullLocator, OldScalarFormatter
+        from matplotlib.ticker import FixedLocator, Locator, LogFormatter, \
+            LogLocator, MaxNLocator, MultipleLocator, NullLocator, \
+            OldScalarFormatter
 
         x_locator, y_locator = ticks
         #---------------------- Location of x-ticks ---------------------#
         if x_locator is None:
-            x_locator = MaxNLocator(**locator_options)
+            if self._xscale == 'log':
+                x_locator = LogLocator(base=self._basex)
+            else:
+                x_locator = MaxNLocator(**locator_options)
         elif isinstance(x_locator,Locator):
             pass
         elif x_locator == []:
@@ -1641,7 +2013,10 @@
 
         #---------------------- Location of y-ticks ---------------------#
         if y_locator is None:
-            y_locator = MaxNLocator(**locator_options)
+            if self._yscale == 'log':
+                y_locator = LogLocator(base=self._basey)
+            else:
+                y_locator = MaxNLocator(**locator_options)
         elif isinstance(y_locator,Locator):
             pass
         elif y_locator == []:
@@ -1663,7 +2038,10 @@
         from sage.symbolic.ring import SR
         #---------------------- Formatting x-ticks ----------------------#
         if x_formatter is None:
-            x_formatter = OldScalarFormatter()
+            if self._xscale == 'log':
+                x_formatter = LogFormatter(base=self._basex)
+            else:
+                x_formatter = OldScalarFormatter()
         elif x_formatter in SR:
             from misc import _multiple_of_constant
             x_const = x_formatter
@@ -1673,7 +2051,10 @@
             x_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
         #---------------------- Formatting y-ticks ----------------------#
         if y_formatter is None:
-            y_formatter = OldScalarFormatter()
+            if self._yscale == 'log':
+                y_formatter = LogFormatter(base=self._basey)
+            else:
+                y_formatter = OldScalarFormatter()
         elif y_formatter in SR:
             from misc import _multiple_of_constant
             y_const = y_formatter
@@ -1689,14 +2070,14 @@
 
         return (subplot, x_locator, y_locator, x_formatter, y_formatter)
 
-    def matplotlib(self, filename=None,
-                   aspect_ratio=None, axes=None, axes_labels=None, axes_pad=0.02,
+    def matplotlib(self, filename=None, aspect_ratio=None, axes=None,
+                   axes_labels=None, axes_pad=0.02, base=None,
                    figsize=None, figure=None, fontsize=None, frame=False,
-                   gridlines=None, gridlinesstyle=None, hgridlinesstyle=None,
-                   legend_options={}, show_legend=None, sub=None,
-                   tick_formatter=None, ticks=None, ticks_integer=None,
-                   xmin=None, xmax=None, ymin=None, ymax=None,
-                   vgridlinesstyle=None, verify=True):
+                   gridlines=None, gridlinesstyle=None,
+                   hgridlinesstyle=None, legend_options={}, scale=None,
+                   show_legend=None, sub=None, tick_formatter=None,
+                   ticks=None, ticks_integer=None, xmin=None, xmax=None,
+                   ymin=None, ymax=None, vgridlinesstyle=None, verify=True):
         r"""
         Return a matplotlib figure object representing the graphic
 
@@ -1790,7 +2171,20 @@
             if hasattr(g, '_bbox_extra_artists'):
                 self._bbox_extra_artists.extend(g._bbox_extra_artists)
 
-        #add the legend if requested
+        #--------------------------- Set the scale -----------------------#
+        if scale is not None:
+            if base is not None:
+                self.set_scale(scale, base)
+            else:
+                self.set_scale(scale)
+        xscale = self._xscale
+        yscale = self._yscale
+        if xscale == 'log':
+            figure.get_axes()[0].set_xscale('log', basex=self._basex)
+        if yscale == 'log':
+            figure.get_axes()[0].set_yscale('log', basey=self._basey)
+
+        #-------------------------- Set the legend -----------------------#
         if show_legend is None:
             show_legend = self._show_legend
 
@@ -1812,7 +2206,7 @@
 
 
         subplot.set_xlim([xmin, xmax])
-        subplot.set_ylim([ymin,ymax])
+        subplot.set_ylim([ymin, ymax])
 
         locator_options=dict(nbins=9,steps=[1,2,5,10],integer=ticks_integer)
 
@@ -1837,7 +2231,7 @@
                             xmax=xmax, xmin=xmin, ymax=ymax, ymin=ymin)
 
             subplot.set_frame_on(True)
-            if axes:
+            if axes and xscale == 'linear' and yscale == 'linear':
                 if ymin<=0 and ymax>=0:
                     subplot.axhline(color=self._axes_color,
                                     linewidth=self._axes_width)
@@ -1850,18 +2244,21 @@
             xmiddle=False
             if xmin>0:
                 subplot.spines['right'].set_visible(False)
-                subplot.spines['left'].set_position(('outward',10))
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['left'].set_position(('outward',10))
                 subplot.yaxis.set_ticks_position('left')
                 subplot.yaxis.set_label_position('left')
                 yaxis='left'
             elif xmax<0:
                 subplot.spines['left'].set_visible(False)
-                subplot.spines['right'].set_position(('outward',10))
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['right'].set_position(('outward',10))
                 subplot.yaxis.set_ticks_position('right')
                 subplot.yaxis.set_label_position('right')
                 yaxis='right'
             else:
-                subplot.spines['left'].set_position('zero')
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['left'].set_position('zero')
                 subplot.yaxis.set_ticks_position('left')
                 subplot.yaxis.set_label_position('left')
                 subplot.spines['right'].set_visible(False)
@@ -1870,18 +2267,21 @@
 
             if ymin>0:
                 subplot.spines['top'].set_visible(False)
-                subplot.spines['bottom'].set_position(('outward',10))
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['bottom'].set_position(('outward',10))
                 subplot.xaxis.set_ticks_position('bottom')
                 subplot.xaxis.set_label_position('bottom')
                 xaxis='bottom'
             elif ymax<0:
                 subplot.spines['bottom'].set_visible(False)
-                subplot.spines['top'].set_position(('outward',10))
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['top'].set_position(('outward',10))
                 subplot.xaxis.set_ticks_position('top')
                 subplot.xaxis.set_label_position('top')
                 xaxis='top'
             else:
-                subplot.spines['bottom'].set_position('zero')
+                if xscale == 'linear' and yscale == 'linear':
+                    subplot.spines['bottom'].set_position('zero')
                 subplot.xaxis.set_ticks_position('bottom')
                 subplot.xaxis.set_label_position('bottom')
                 subplot.spines['top'].set_visible(False)
@@ -1916,8 +2316,9 @@
             #                     t.set_markersize(4)
 
             # Make the zero tick labels disappear if the axes cross
-            # inside the picture
-            if xmiddle and ymiddle:
+            # inside the picture, but only if log scale is not used
+            if xmiddle and ymiddle and xscale == 'linear' and \
+                yscale == 'linear':
                 from sage.plot.plot import SelectiveFormatter
                 subplot.yaxis.set_major_formatter(SelectiveFormatter(
                     subplot.yaxis.get_major_formatter(), skip_values=[0]))
@@ -1935,30 +2336,24 @@
 
         if frame or axes:
             # Make minor tickmarks, unless we specify fixed ticks or no ticks
+            # We do this change only on linear scale, otherwise matplotlib
+            # errors out with a memory error.
             from matplotlib.ticker import AutoMinorLocator, FixedLocator, NullLocator
-            if isinstance(x_locator, (NullLocator, FixedLocator)):
-                subplot.xaxis.set_minor_locator(NullLocator())
-            else:
-                subplot.xaxis.set_minor_locator(AutoMinorLocator())
-            if isinstance(y_locator, (NullLocator, FixedLocator)):
-                subplot.yaxis.set_minor_locator(NullLocator())
-            else:
-                subplot.yaxis.set_minor_locator(AutoMinorLocator())
-
-            ticklabels=subplot.xaxis.get_majorticklabels() + \
-                subplot.xaxis.get_minorticklabels() + \
-                subplot.yaxis.get_majorticklabels() + \
-                subplot.yaxis.get_minorticklabels()
-            for ticklabel in ticklabels:
-                ticklabel.set_fontsize(self._fontsize)
-                ticklabel.set_color(self._tick_label_color)
-
-            ticklines=subplot.xaxis.get_majorticklines() + \
-                subplot.xaxis.get_minorticklines() + \
-                subplot.yaxis.get_majorticklines() + \
-                subplot.yaxis.get_minorticklines()
-            for tickline in ticklines:
-                tickline.set_color(self._axes_color)
+            if xscale == 'linear':
+                if isinstance(x_locator, (NullLocator, FixedLocator)):
+                    subplot.xaxis.set_minor_locator(NullLocator())
+                else:
+                    subplot.xaxis.set_minor_locator(AutoMinorLocator())
+            if yscale == 'linear':
+                if isinstance(y_locator, (NullLocator, FixedLocator)):
+                    subplot.yaxis.set_minor_locator(NullLocator())
+                else:
+                    subplot.yaxis.set_minor_locator(AutoMinorLocator())
+
+            # Set the color and fontsize of ticks
+            figure.get_axes()[0].tick_params(color=self._axes_color,
+                    labelcolor=self._tick_label_color,
+                    labelsize=self._fontsize, which='both')
 
 
         if gridlines is not None:
