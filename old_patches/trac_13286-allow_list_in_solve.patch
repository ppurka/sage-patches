# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1343733499 -28800
# Node ID bd88c770c7296f94dfa8d610379fcae6751c9a56
# Parent  79d77c717499ade7a62afcdc1efedf0f4b1112e1
Take care of cases like solve([x-4], [x]) for consistency with multivariable input

diff --git a/sage/symbolic/expression.pyx b/sage/symbolic/expression.pyx
--- a/sage/symbolic/expression.pyx
+++ b/sage/symbolic/expression.pyx
@@ -8283,7 +8283,7 @@
 
         TESTS:
 
-        Trac #7325 (solving inequalities)::
+        :trac:`7325` (solving inequalities)::
 
             sage: (x^2>1).solve(x)
             [[x < -1], [x > 1]]
@@ -8298,21 +8298,21 @@
             sage: solve(acot(x),x,to_poly_solve=True)
             []
 
-        Trac #7491 fixed:: 
+        :trac:`7491` fixed::
 
             sage: y=var('y')
             sage: solve(y==y,y)
             [y == r1]
             sage: solve(y==y,y,multiplicities=True)
             ([y == r1], [])
-        
+
             sage: from sage.symbolic.assumptions import GenericDeclaration
             sage: GenericDeclaration(x, 'rational').assume()
             sage: solve(x^2 == 2, x)
             []
             sage: forget()
 
-        Trac #8390 fixed::
+        :trac:`8390` fixed::
 
             sage: solve(sin(x)==1/2,x)
             [x == 1/6*pi]
@@ -8327,11 +8327,16 @@
             sage: solve(sin(x)==1/2,x,to_poly_solve='force')
             [x == 5/6*pi + 2*pi*z116, x == 1/6*pi + 2*pi*z114]
 
-        Trac #11618 fixed::
+        :trac:`11618` fixed::
 
             sage: g(x)=0
             sage: solve(g(x)==0,x,solution_dict=True)
             [{x: r1}]
+
+        :trac:`13286` fixed::
+
+            sage: solve([x-4], [x])
+            [x == 4]
         """
         import operator
         cdef Expression ex
@@ -8353,6 +8358,14 @@
         if multiplicities and to_poly_solve:
             raise NotImplementedError, "to_poly_solve does not return multiplicities"
 
+        # Take care of cases like solve([x^2-1], [x]) for consistency with
+        # multiple variable input in sage.symbolic.relation.solve().
+        # There *should* be only one variable in the list, since it is
+        # passed from sage.symbolic.relation.solve() and multiple variables
+        # there don't call this function.
+        if isinstance(x, (list, tuple)):
+            x = x[0]
+
         if x is None:
             v = ex.variables()
             if len(v) == 0:
