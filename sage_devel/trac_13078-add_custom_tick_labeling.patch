# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1342682017 -28800
# Node ID fd578fa7def6ee7ecc736cf0e22a30b31ffc5f0f
# Parent  79d0af78e6acaae1431cea49b21f1befbc45cd42
add custom tick labeling and position

diff --git a/sage/plot/graphics.py b/sage/plot/graphics.py
--- a/sage/plot/graphics.py
+++ b/sage/plot/graphics.py
@@ -1387,6 +1387,17 @@
             intended to be used when the tick locator for at least one of
             the axes is a list including some symbolic elements.  See examples.
 
+          - If the first entry is a list of strings (or numbers), then the
+            formatting for the horizontal axis will be typeset with the strings
+            present in the list. Each entry of the list of strings must be
+            provided with a corresponding number in the first entry of
+            ``ticks`` to indicate its position on the axis. To typeset the
+            strings with ``"latex"`` enclose them within ``"$"`` symbols. To
+            have similar custom formatting of the labels along the vertical
+            axis, the second entry must be a list of strings and the second
+            entry of ``ticks`` must also be a list of numbers which give the
+            positions of the labels. See the examples below.
+
         - ``show_legend`` - (default: None) If True, show the legend
 
         - ``legend_*`` - all the options valid for :meth:`set_legend_options` prefixed with ``legend_``
@@ -1689,6 +1700,25 @@
 
             sage: plot(arcsin(x),(x,-1,1),ticks=[None,pi/6],tick_formatter=[None,pi]) # Not so nice-looking
 
+        Custom tick labels can be provided by providing the keyword
+        ``tick_formatter`` with the list of labels, and simultaneously
+        providing the keyword ``ticks`` with the positions of the labels. ::
+
+            sage: plot(x, (x,0,3), ticks=[[1,2.5],[0.5,1,2]], tick_formatter=[["$x_1$","$x_2$"],["$y_1$","$y_2$","$y_3$"]])
+
+        The following sets the custom tick labels only along the horizontal
+        axis. ::
+
+            sage: plot(x**2, (x,0,2), ticks=[[1,2], None], tick_formatter=[["$x_1$","$x_2$"], None])
+
+        If the number of tick labels do not match the number of positions of
+        tick labels, then it results in an error.::
+
+            sage: plot(x**2, (x,0,2), ticks=[[2], None], tick_formatter=[["$x_1$","$x_2$"], None])
+            Traceback (most recent call last):
+            ...
+            ValueError: If the first component of the list `tick_formatter` is a list then the first component of `ticks` must also be a list of equal length.
+
         When using logarithmic scale along the axis, make sure to have
         enough room for two ticks so that the user can tell what the scale
         is. This can be effected by increasing the range of the independent
@@ -1915,7 +1945,7 @@
                 '(option `ticks`).')
 
         x_formatter, y_formatter = tick_formatter
-        from matplotlib.ticker import FuncFormatter
+        from matplotlib.ticker import FuncFormatter, FixedFormatter
         from sage.misc.latex import latex
         from sage.symbolic.ring import SR
         #---------------------- Formatting x-ticks ----------------------#
@@ -1937,6 +1967,13 @@
                                                         "\\mathdefault",""))
             else:
                 x_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
+        elif isinstance(x_formatter, (list, tuple)):
+            if (not isinstance(ticks[0], (list, tuple)) or
+                    len(ticks[0]) != len(x_formatter)):
+                raise ValueError("If the first component of the list "
+                    "`tick_formatter` is a list then the first component "
+                    "of `ticks` must also be a list of equal length.")
+            x_formatter = FixedFormatter(x_formatter)
         #---------------------- Formatting y-ticks ----------------------#
         if y_formatter is None:
             if scale[1] == 'log':
@@ -1956,6 +1993,13 @@
                                                         "\\mathdefault",""))
             else:
                 y_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
+        elif isinstance(y_formatter, (list, tuple)):
+            if (not isinstance(ticks[1], (list, tuple)) or
+                    len(ticks[1]) != len(y_formatter)):
+                raise ValueError("If the second component of the list "
+                    "`tick_formatter` is a list then the second component "
+                    "of `ticks` must also be a list of equal length.")
+            y_formatter = FixedFormatter(y_formatter)
 
         subplot.xaxis.set_major_locator(x_locator)
         subplot.yaxis.set_major_locator(y_locator)
diff --git a/sage/plot/plot.py b/sage/plot/plot.py
--- a/sage/plot/plot.py
+++ b/sage/plot/plot.py
@@ -133,6 +133,10 @@
 
     sage: plot(x^2,(x,300,500),ticks=[None,50000])
 
+You can even have custom tick labels along with custom positioning. ::
+
+    sage: plot(x**2, (x,0,3), ticks=[[1,2.5],pi/2], tick_formatter=[["$x_1$","$x_2$"],pi])
+
 We construct a plot involving several graphics objects::
 
     sage: G = plot(cos(x), (x, -5, 5), thickness=5, color='green')
@@ -978,6 +982,10 @@
 
         sage: plot(sin(x),(x,0,2*pi),ticks=pi/3,tick_formatter=pi)
 
+    You can even have custom tick labels along with custom positioning. ::
+
+        sage: plot(x**2, (x,0,3), ticks=[[1,2.5],[0.5,1,2]], tick_formatter=[["$x_1$","$x_2$"],["$y_1$","$y_2$","$y_3$"]])
+
     A example with excluded values::
 
         sage: plot(floor(x), (x, 1, 10), exclude = [1..10])
