# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1352462711 -28800
# Node ID 33dc5632331ffede44cb20a060a7f48a5719b240
# Parent  ed53f7c418826dc082a1f8ed37d1747f124ec4b2
Trac 13417: Iterators for finite ZZ-submodules and subspaces over finite fields
* * *
replace iteration with a recursive call

diff --git a/module_list.py b/module_list.py
--- a/module_list.py
+++ b/module_list.py
@@ -1195,6 +1195,9 @@
     ##
     ################################
 
+    Extension('sage.modules.finite_submodule_iter',
+              sources = ['sage/modules/finite_submodule_iter.pyx']),
+
     Extension('sage.modules.free_module_element',
               sources = ['sage/modules/free_module_element.pyx'],
               depends = numpy_depends),
diff --git a/sage/modules/finite_submodule_iter.pxd b/sage/modules/finite_submodule_iter.pxd
new file mode 100644
--- /dev/null
+++ b/sage/modules/finite_submodule_iter.pxd
@@ -0,0 +1,16 @@
+# cython: profile=False
+from sage.structure.element cimport ModuleElement
+
+cdef class FiniteZZsubmodule_iterator:
+    #### Global Data
+    cdef FiniteZZsubmodule_iterator _other_ZZ
+    cdef ModuleElement _basis
+    cdef ModuleElement _cw
+    cdef ModuleElement _other
+    cdef list _basis_all
+    cdef list _plus
+    cdef int _basis_length
+    cdef int _count
+    cdef int _order
+
+    cdef ModuleElement _iteration(FiniteZZsubmodule_iterator self)
diff --git a/sage/modules/finite_submodule_iter.pyx b/sage/modules/finite_submodule_iter.pyx
new file mode 100644
--- /dev/null
+++ b/sage/modules/finite_submodule_iter.pyx
@@ -0,0 +1,246 @@
+r"""
+Iterators over finite submodules of a `\ZZ`-module
+
+We iterate over the elements of a finite `\ZZ`-module. The action
+of `\ZZ` must be the natural one.
+
+This class is intended to provide optimizations for the
+:meth:`sage.free_module.FreeModule_generic:__iter__` method.
+
+AUTHORS:
+
+- Thomas Feulner (2012-08-31): initial version
+- Punarbasu Purkayastha (2012-11-09): replaced the loop with recursion
+
+EXAMPLES::
+
+    sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+    sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+    sage: iter = FiniteZZsubmodule_iterator([x,y], [3,3])
+    sage: list(iter)
+    [0, x, 2*x, y, x + y, 2*x + y, 2*y, x + 2*y, 2*x + 2*y]
+
+There is a specialization for subspaces over finite fields::
+
+    sage: from sage.modules.finite_submodule_iter import FiniteFieldsubspace_iterator
+    sage: A = random_matrix(GF(4, 'a'), 5, 100)
+    sage: iter = FiniteFieldsubspace_iterator(A)
+    sage: len(list(iter))
+    1024
+
+TESTS::
+
+    sage: from sage.modules.finite_submodule_iter import FiniteFieldsubspace_iterator
+    sage: A = random_matrix(GF(4, 'a'), 5, 100)
+    sage: iter = FiniteFieldsubspace_iterator(A)
+    sage: TestSuite(iter).run(skip='_test_pickling')
+
+In a second step, we will replace all calls to ``__iter__`` for finite submodules. This
+will result in improved running times::
+
+    sage: A = random_matrix(GF(2), 15, 100)
+    sage: X = A.row_space()
+    sage: x = [0 for _ in X] #long time #takes 7.12 seconds
+    sage: y = [0 for _ in FiniteFieldsubspace_iterator(A)] # takes 0.05 seconds
+    sage: sorted(x) == sorted(y) #long time
+    True
+"""
+
+#*****************************************************************************
+#       Copyright (C) 2012 Thomas Feulner <thomas.feulner@uni-bayreuth.de>
+#
+#  Distributed under the terms of the GNU General Public License (GPL)
+#  as published by the Free Software Foundation; either version 2 of
+#  the License, or (at your option) any later version.
+#                  http://www.gnu.org/licenses/
+#*****************************************************************************
+
+include "../ext/stdsage.pxi"
+
+cdef class FiniteZZsubmodule_iterator:
+    r"""
+    Let `G` be an abelian group and suppose that `(g_0, \ldots, g_n)`
+    is a list of elements of `G`, whose additive orders are equal to `m_i`
+    and `\sum_{i=0}^n x_i g_i = 0` for `x_i \in \ZZ_{m_i}` for
+    `i \in \{0, \dots, n\}` implies `x_i=0` for all `i`.
+
+    This class implements an iterator over the `\ZZ`-submodule
+    `M = \{\sum_{i=0}^n x_i g_i\}`. If the independence condition from
+    above is not fulfilled, we can still use this iterator to run over the
+    elements. In this case the elements will occur multiple times.
+
+    Getting from one element of the submodule to another is performed by
+    one single addition in `G`.
+
+    INPUT:
+
+        - ``basis``  - the elements `(g_0, \ldots, g_n)`
+        - ``orders`` (optional) - the additive_orders `m_i` of `g_i`.
+
+    EXAMPLES::
+
+        sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+        sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+        sage: iter = FiniteZZsubmodule_iterator([x,y], [3,3])
+        sage: list(iter)
+        [0, x, 2*x, y, x + y, 2*x + y, 2*y, x + 2*y, 2*x + 2*y]
+    """
+
+    def __init__(self, basis, order=None):
+        """
+        see :class:`FiniteZZsubmodule_iterator`
+
+        EXAMPLES::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+            sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+            sage: iter = FiniteZZsubmodule_iterator([x,y], [3,3])
+            sage: list(iter)
+            [0, x, 2*x, y, x + y, 2*x + y, 2*y, x + 2*y, 2*x + 2*y]
+        """
+        if order is None:
+            try:
+                order = [b.additive_order() for b in basis]
+            except (AttributeError, NotImplementedError):
+                raise ValueError("Unable to determine the additive order "
+                                 "of a basis element. Use the optional "
+                                 "parameter `order`.")
+
+        self._basis = basis[0]
+        self._basis_all = basis
+        self._basis_length = len(basis)
+        self._count = 0
+        self._cw = self._basis.parent().zero()
+        self._order = order[0]
+        self._other = self._basis.parent().zero() # dummy initialization
+        if self._basis_length > 1:
+            self._other_ZZ = FiniteZZsubmodule_iterator(basis[1:], order[1:])
+        self._plus = [self._cw]     # storing this provides about 20% speedup
+        for _ in range(self._order-1):
+            self._cw += self._basis
+            self._plus.append(self._cw)
+
+    def __next__(self):
+        """
+        Return the next submodule element. This will just add/subtract
+        another element of the ``basis``.
+
+        EXAMPLES::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+            sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+            sage: iter = FiniteZZsubmodule_iterator([x,y], [3,3])
+            sage: next(iter) #indirect doctest
+            0
+            sage: next(iter) #indirect doctest
+            x
+        """
+        self._iteration()
+        return self._cw
+
+    def __repr__(self):
+        """
+        EXAMPLES::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+            sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+            sage: FiniteZZsubmodule_iterator([x,y], [3,3])
+            Iterator over ZZ-submodule generated by [x, y]
+        """
+        return "Iterator over ZZ-submodule generated by {0}".format(self._basis_all)
+
+    def __iter__(self):
+        """
+        EXAMPLE::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+            sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+            sage: list(FiniteZZsubmodule_iterator([x,y], [3,3])) #indirect doctest
+            [0, x, 2*x, y, x + y, 2*x + y, 2*y, x + 2*y, 2*x + 2*y]
+        """
+        return self
+
+    cdef ModuleElement _iteration(FiniteZZsubmodule_iterator self):
+        """
+        This is the core implementation of the iteration.
+
+        EXAMPLES::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteZZsubmodule_iterator
+            sage: F.<x,y,z> = FreeAlgebra(GF(3),3)
+            sage: iter = FiniteZZsubmodule_iterator([x,y], [3,3])
+            sage: next(iter) #indirect doctest
+            0
+            sage: print next(iter), next(iter), next(iter) #indirect doctest
+            x 2*x y
+        """
+        if self._basis_length == 1:
+            if self._count < self._order:
+                self._cw = self._plus[self._count]
+                self._count += 1
+            else:
+                raise StopIteration
+        else:
+            if self._count == 0 or self._count == self._order:
+                self._other = self._other_ZZ.next()
+                self._cw = <ModuleElement> self._other
+                self._count = 1
+            else:
+                self._cw = self._other + self._plus[self._count]
+                self._count += 1
+
+
+cdef class FiniteFieldsubspace_iterator(FiniteZZsubmodule_iterator):
+    """
+    This class implements an iterator over the subspace of a vector
+    space over a finite field. The subspace is generated by ``basis``.
+
+    INPUT:
+
+        - ``basis`` -- a list of vectors or a matrix with elements over
+          a finite field. If a matrix is provided then it is not checked
+          whether the matrix is full ranked. Similarly, if a list of
+          vectors is provided, then the linear independence of the vectors
+          is not checked.
+
+    EXAMPLES::
+
+        sage: from sage.modules.finite_submodule_iter import FiniteFieldsubspace_iterator
+        sage: A = random_matrix(GF(2), 10, 100)
+        sage: iter = FiniteFieldsubspace_iterator(A)
+        sage: len(list(iter))
+        1024
+        sage: X = random_matrix(GF(4, 'a'), 7, 100).row_space()
+        sage: s = list(X) # takes 5.78s on a Core2 6400 2.13GHz
+        sage: t = list(FiniteFieldsubspace_iterator(X.basis())) # takes 0.31s
+        sage: sorted(t) == sorted(s)
+        True
+    """
+
+    def __init__(self, basis):
+        """
+        see :class:`FiniteFieldsubspace_iterator`
+
+        EXAMPLES::
+
+            sage: from sage.modules.finite_submodule_iter import FiniteFieldsubspace_iterator
+            sage: A = random_matrix(GF(2), 10, 100)
+            sage: iter = FiniteFieldsubspace_iterator(A)
+            sage: len(list(iter))
+            1024
+        """
+        cdef Py_ssize_t d, i, p
+        cdef list pows, order
+
+        F = basis[0].base_ring()
+        P = F.prime_subfield()
+        p = P.order()
+        alpha = F.primitive_element()
+        degree = F.degree()
+
+        pows = [alpha**i for i in range(degree)]
+        basis = [_p*x for x in basis for _p in pows] # a ZZ_p-basis for the vectorspace
+        order = [p]*(len(basis))
+
+        FiniteZZsubmodule_iterator.__init__(self, basis, order)
+
