# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1354275061 -28800
# Node ID ff768649efe49936b290f5a8b6cd391b930feeba
# Parent  99ffbe51456483ac15f858e99c6684d2cfc07d33
some whitespace cleanup and use "is None" for comparison

diff --git a/sage/modules/finite_submodule_iter.pyx b/sage/modules/finite_submodule_iter.pyx
--- a/sage/modules/finite_submodule_iter.pyx
+++ b/sage/modules/finite_submodule_iter.pyx
@@ -28,7 +28,7 @@
     sage: iter = FiniteFieldsubspace_iterator(A)
     sage: len(list(iter))
     1024
-    
+
 The module also allows the iteration over cosets::
 
     sage: from sage.modules.finite_submodule_iter import FiniteFieldsubspace_iterator
@@ -126,7 +126,7 @@
         self._basis_length = len(basis)
         self._count = 0
 
-        if coset_rep == None:
+        if coset_rep is None:
             self._coset_rep = self._basis.parent().zero()
         else:
             self._coset_rep = self._basis.parent()(coset_rep)
@@ -225,7 +225,7 @@
           whether the matrix is full ranked. Similarly, if a list of
           vectors is provided, then the linear independence of the vectors
           is not checked.
-          
+
         - ``coset_rep`` (optional) -- a vector in the same ambient space,
           if one aims to compute a coset of the vector space given by ``basis``.
 
@@ -283,10 +283,10 @@
     This class implements an iterator over the projective points of a vector
     space over a finite field. The vector space is generated by ``basis`` and
     need not to be equal to the full ambient space.
-    
-    A projective point (= one dimensional subspace) `P` will be represented by a 
+
+    A projective point (= one dimensional subspace) `P` will be represented by a
     generator `p`. To ensure that all `p` will be normalized you can set the
-    optional argument ``normalize`` to ``True``.    
+    optional argument ``normalize`` to ``True``.
 
     INPUT:
 
@@ -295,7 +295,7 @@
           whether the matrix is full ranked. Similarly, if a list of
           vectors is provided, then the linear independence of the vectors
           is not checked.
-          
+
         - ``normalize`` (optional) -- boolean which indicates if the
           returned vectors should be normalized, i.e. the first nonzero coordinate
           is equal to 1. Default: False
@@ -308,9 +308,9 @@
         sage: b = len(list(FiniteFieldsubspace_projPoint_iterator(A)))
         sage: b == (a-1)/3
         True
-    
+
     Prove that the option ``normalize == True`` will only return normalized vectors.
-        
+
         sage: all([ x.normalize() == x for x in FiniteFieldsubspace_projPoint_iterator(A, True) ])
         True
 
@@ -346,7 +346,7 @@
             B = matrix(self._basis)
             B.echelonize()
             self._basis = B.rows()
-            self._basis.reverse()    
+            self._basis.reverse()
 
         if self._basis_length == 0:
             self._one_dimensional_case = 2
