# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1337431080 -28800
# Node ID f65fe56c0d86739afcf8824aba315c5fa3f47b98
# Parent  f437d9b9b70e5871a6b5b2b963d48c3b8f70fe87
refactor tick formatting code, and remove extraneous spaces

diff --git a/sage/plot/graphics.py b/sage/plot/graphics.py
--- a/sage/plot/graphics.py
+++ b/sage/plot/graphics.py
@@ -39,35 +39,35 @@
     r"""
     Set the default for showing plots using any plot commands. If
     called with no arguments, returns the current default.
-    
+
     If this is ``True`` (the default) then any plot object
     when displayed will be displayed as an actual plot instead of text,
     i.e., the show command is not needed.
-    
+
     EXAMPLES: The default starts out as ``True``::
-    
+
         sage: show_default()
         True
-    
+
     We set it to ``False``.
-    
+
     ::
-    
+
         sage: show_default(False)
-    
+
     We see that it is ``False``.
-    
+
     ::
-    
+
         sage: show_default()
         False
-    
+
     Now plot commands will not display their plots by default.
-    
+
     Turn back on default display.
-    
+
     ::
-    
+
         sage: show_default(True)
     """
     global SHOW_DEFAULT
@@ -82,9 +82,9 @@
 def is_Graphics(x):
     """
     Return True if `x` is a Graphics object.
-    
+
     EXAMPLES::
-    
+
         sage: from sage.plot.graphics import is_Graphics
         sage: is_Graphics(1)
         False
@@ -98,18 +98,18 @@
     The Graphics object is an empty list of graphics objects It is
     useful to use this object when initializing a for loop where
     different graphics object will be added to the empty object.
-    
+
     EXAMPLES::
-    
+
         sage: G = Graphics(); print G
         Graphics object consisting of 0 graphics primitives
         sage: c = circle((1,1), 1)
         sage: G+=c; print G
         Graphics object consisting of 1 graphics primitive
-    
+
     Here we make a graphic of embedded isosceles triangles, coloring
     each one with a different color as we go::
-    
+
         sage: h=10; c=0.4; p=0.5;
         sage: G = Graphics()
         sage: for x in srange(1,h+1):
@@ -142,9 +142,9 @@
     def __init__(self):
         """
         Create a new empty Graphics objects with all the defaults.
-        
+
         EXAMPLES::
-        
+
             sage: G = Graphics()
         """
         self._axes_color = (0, 0, 0)
@@ -164,34 +164,34 @@
         Set the aspect ratio, which is the ratio of height and width
         of a unit square (i.e., height/width of a unit square), or
         'automatic' (expand to fill the figure).
-        
+
         INPUT:
-        
-        
+
+
         -  ``ratio`` - a positive real number or 'automatic'
-        
-        
+
+
         EXAMPLES: We create a plot of the upper half of a circle, but it
         doesn't look round because the aspect ratio is off::
-        
+
             sage: P = plot(sqrt(1-x^2),(x,-1,1)); P
-        
+
         So we set the aspect ratio and now it is round::
-        
+
             sage: P.set_aspect_ratio(1)
             sage: P.aspect_ratio()
             1.0
             sage: P
-        
+
         Note that the aspect ratio is inherited upon addition (which takes
         the max of aspect ratios of objects whose aspect ratio has been
         set)::
-        
+
             sage: P + plot(sqrt(4-x^2),(x,-2,2))
-        
+
         In the following example, both plots produce a circle that looks
         twice as tall as wide::
-        
+
             sage: Q = circle((0,0), 0.5); Q.set_aspect_ratio(2)
             sage: (P + Q).aspect_ratio(); P+Q
             2.0
@@ -210,12 +210,12 @@
         """
         Get the current aspect ratio, which is the ratio of height to
         width of a unit square, or 'automatic'.
-        
+
         OUTPUT: a positive float (height/width of a unit square), or 'automatic'
         (expand to fill the figure).
-        
+
         EXAMPLES:
-        
+
         The default aspect ratio for a new blank Graphics object is 'automatic'::
 
             sage: P = Graphics()
@@ -239,13 +239,13 @@
     def legend(self, show=None):
         r"""
         Set whether or not the legend is shown by default.
-        
+
         INPUT:
 
         -  ``show`` - (default: None) a boolean
-        
+
         If called with no input, return the current legend setting.
-        
+
         EXAMPLES:
 
         By default no legend is displayed::
@@ -253,7 +253,7 @@
             sage: P = plot(sin)
             sage: P.legend()
             False
-            
+
         But if we put a label then the legend is shown::
 
             sage: P = plot(sin, legend_label='sin')
@@ -276,7 +276,7 @@
     def set_legend_options(self, **kwds):
         r"""
         Set various legend options.
-        
+
         INPUT:
 
         - ``title`` - (default: None) string, the legend title
@@ -354,9 +354,9 @@
           fancybox.
 
         These are all keyword arguments.
-        
+
         OUTPUT: a dictionary of all current legend options
-            
+
         EXAMPLES:
 
         By default, no options are set::
@@ -364,13 +364,13 @@
             sage: p = plot(tan, legend_label='tan')
             sage: p.set_legend_options()
             {}
-        
+
         We build a legend with a shadow::
 
             sage: p.set_legend_options(shadow=True)
             sage: p.set_legend_options()['shadow']
             True
-        
+
         To set the legend position to the center of the plot, all these
         methods are roughly equivalent::
 
@@ -388,7 +388,7 @@
             return self._legend_opts
         else:
             self._legend_opts.update(kwds)
-    
+
 
     def get_axes_range(self):
         """
@@ -418,15 +418,15 @@
     def set_axes_range(self, xmin=None, xmax=None, ymin=None, ymax=None):
         """
         Set the ranges of the `x` and `y` axes.
-        
+
         INPUT:
-        
-        
+
+
         -  ``xmin, xmax, ymin, ymax`` - floats
-        
-        
+
+
         EXAMPLES::
-        
+
             sage: L = line([(1,2), (3,-4), (2, 5), (1,2)])
             sage: L.set_axes_range(-1, 20, 0, 2)
             sage: d = L.get_axes_range()
@@ -464,26 +464,26 @@
     def fontsize(self, s=None):
         """
         Set the font size of axes labels and tick marks.
-        
+
         INPUT:
-        
-        
+
+
         -  ``s`` - integer, a font size in points.
-        
-        
+
+
         If called with no input, return the current fontsize.
-        
+
         EXAMPLES::
-        
+
             sage: L = line([(1,2), (3,-4), (2, 5), (1,2)])
             sage: L.fontsize()
             10
             sage: L.fontsize(20)
             sage: L.fontsize()
             20
-        
+
         All the numbers on the axes will be very large in this plot::
-        
+
             sage: L
         """
         if s is None:
@@ -498,38 +498,38 @@
         """
         Set whether or not the `x` and `y` axes are shown
         by default.
-        
+
         INPUT:
-        
-        
+
+
         -  ``show`` - bool
-        
-        
+
+
         If called with no input, return the current axes setting.
-        
+
         EXAMPLES::
-        
+
             sage: L = line([(1,2), (3,-4), (2, 5), (1,2)])
-        
+
         By default the axes are displayed.
-        
+
         ::
-        
+
             sage: L.axes()
             True
-        
+
         But we turn them off, and verify that they are off
-        
+
         ::
-        
+
             sage: L.axes(False)
             sage: L.axes()
             False
-        
+
         Displaying L now shows a triangle but no axes.
-        
+
         ::
-        
+
             sage: L
         """
         if show is None:
@@ -543,44 +543,44 @@
     def axes_color(self, c=None):
         """
         Set the axes color.
-        
+
         If called with no input, return the current axes_color setting.
-        
+
         INPUT:
-        
-        
+
+
         -  ``c`` - an RGB color 3-tuple, where each tuple entry
            is a float between 0 and 1
-        
-        
+
+
         EXAMPLES: We create a line, which has like everything a default
         axes color of black.
-        
+
         ::
-        
+
             sage: L = line([(1,2), (3,-4), (2, 5), (1,2)])
             sage: L.axes_color()
             (0, 0, 0)
-        
+
         We change the axes color to red and verify the change.
-        
+
         ::
-        
+
             sage: L.axes_color((1,0,0))
             sage: L.axes_color()
             (1.0, 0.0, 0.0)
-        
+
         When we display the plot, we'll see a blue triangle and bright red
         axes.
-        
+
         ::
-        
+
             sage: L
         """
         if c is None:
             try:
                 return self._axes_color
-            
+
             except AttributeError:
                 self._axes_color = (0.0, 0.0, 0.0)
                 return self._axes_color
@@ -589,31 +589,31 @@
     def axes_labels(self, l=None):
         """
         Set the axes labels.
-        
+
         INPUT:
-        
-        
+
+
         -  ``l`` - (default: None) a list of two strings or
            None
-        
-        
+
+
         OUTPUT: a 2-tuple of strings
-        
+
         If l is None, returns the current ``axes_labels``,
         which is itself by default None. The default labels are both
         empty.
-        
+
         EXAMPLES: We create a plot and put x and y axes labels on it.
-        
+
         ::
-        
+
             sage: p = plot(sin(x), (x, 0, 10))
             sage: p.axes_labels(['$x$','$y$'])
             sage: p.axes_labels()
             ('$x$', '$y$')
-        
+
         Now when you plot p, you see x and y axes labels::
-        
+
             sage: p
 
         Notice that some may prefer axes labels which are not
@@ -636,44 +636,44 @@
     def axes_label_color(self, c=None):
         r"""
         Set the color of the axes labels.
-        
+
         The axes labels are placed at the edge of the x and y axes, and are
         not on by default (use the ``axes_labels`` command to
         set them; see the example below). This function just changes their
         color.
-        
+
         INPUT:
-        
-        
+
+
         -  ``c`` - an RGB 3-tuple of numbers between 0 and 1
-        
-        
+
+
         If called with no input, return the current axes_label_color
         setting.
-        
+
         EXAMPLES: We create a plot, which by default has axes label color
         black.
-        
+
         ::
-        
+
             sage: p = plot(sin, (-1,1))
             sage: p.axes_label_color()
             (0, 0, 0)
-        
+
         We change the labels to be red, and confirm this::
-        
+
             sage: p.axes_label_color((1,0,0))
             sage: p.axes_label_color()
             (1.0, 0.0, 0.0)
-        
+
         We set labels, since otherwise we won't see anything.
-        
+
         ::
-        
+
             sage: p.axes_labels(['$x$ axis', '$y$ axis'])
-        
+
         In the plot below, notice that the labels are red::
-        
+
             sage: p
         """
         if c is None:
@@ -689,32 +689,32 @@
         r"""
         Set the axes width. Use this to draw a plot with really fat or
         really thin axes.
-        
+
         INPUT:
-        
-        
+
+
         -  ``w`` - a float
-        
-        
+
+
         If called with no input, return the current
         ``axes_width`` setting.
-        
+
         EXAMPLE: We create a plot, see the default axes width (with funny
         Python float rounding), then reset the width to 10 (very fat).
-        
+
         ::
-        
+
             sage: p = plot(cos, (-3,3))
             sage: p.axes_width()
             0.8
             sage: p.axes_width(10)
             sage: p.axes_width()
             10.0
-        
+
         Finally we plot the result, which is a graph with very fat axes.
-        
+
         ::
-        
+
             sage: p
         """
         if w is None:
@@ -728,18 +728,18 @@
     def tick_label_color(self, c=None):
         """
         Set the color of the axes tick labels.
-        
+
         INPUT:
-        
-        
+
+
         -  ``c`` - an RGB 3-tuple of numbers between 0 and 1
-        
-        
+
+
         If called with no input, return the current tick_label_color
         setting.
-        
+
         EXAMPLES::
-        
+
             sage: p = plot(cos, (-3,3))
             sage: p.tick_label_color()
             (0, 0, 0)
@@ -759,44 +759,44 @@
     def _repr_(self):
         r"""
         Show this graphics objects.
-        
+
         If the ``show_default`` function has been called with
         True (the default), then you'll see this graphics object displayed.
         Otherwise you'll see a text representation of it.
-        
+
         EXAMPLES: We create a plot and call ``_repr_`` on it,
         which causes it to be displayed as a plot::
-        
+
             sage: P = plot(cos, (-1,1))
             sage: P._repr_()
             ''
-        
+
         Just doing this also displays the plot::
-        
+
             sage: P
-        
+
         Note that printing P with the ``print`` statement does
         not display the plot::
-        
+
             sage: print P
             Graphics object consisting of 1 graphics primitive
-        
+
         Now we turn off showing plots by default::
-        
+
             sage: show_default(False)
-        
+
         Now we just get a string. To show P you would have to do
         ``show(P)``.
-        
+
         ::
-        
+
             sage: P._repr_()
             'Graphics object consisting of 1 graphics primitive'
             sage: P
             Graphics object consisting of 1 graphics primitive
-        
+
         Finally, we turn ``show_default`` back on::
-        
+
             sage: show_default(True)
         """
         if SHOW_DEFAULT:
@@ -808,39 +808,39 @@
     def __str__(self):
         r"""
         Return string representation of this plot.
-        
+
         EXAMPLES::
-        
+
             sage: S = circle((0,0), 2); S.__str__()
             'Graphics object consisting of 1 graphics primitive'
             sage: print S
             Graphics object consisting of 1 graphics primitive
-        
+
         .. warning::
 
            ``__str__`` is not called when printing lists of graphics
            objects, which can be confusing, since they will all pop
            up. One workaround is to call ``show_default``:
-        
+
         For example, below when we do ``print v`` two plots are
         displayed::
-        
+
             sage: v = [circle((0,0), 2), circle((2,3), 1)]
             sage: print v
             [, ]
-        
+
         However, if we call ``show_default`` then we see the
         text representations of the graphics::
-        
+
             sage: show_default(False)
             sage: print v
             [Graphics object consisting of 1 graphics primitive, Graphics object consisting of 1 graphics primitive]
             sage: v
             [Graphics object consisting of 1 graphics primitive,
              Graphics object consisting of 1 graphics primitive]
-        
+
         ::
-        
+
             sage: show_default(True)
         """
         pr, i = '', 0
@@ -855,9 +855,9 @@
     def __getitem__(self, i):
         """
         Returns the ith graphics primitive object:
-        
+
         EXAMPLE::
-        
+
             sage: G = circle((1,1),2) + circle((2,2),5); print G
             Graphics object consisting of 2 graphics primitives
             sage: G[1]
@@ -869,9 +869,9 @@
         """
         If G is of type Graphics, then len(G) gives the number of distinct
         graphics primitives making up that object.
-        
+
         EXAMPLES::
-        
+
             sage: G = circle((1,1),1) + circle((1,2),1) + circle((1,2),5); print G
             Graphics object consisting of 3 graphics primitives
             sage: len(G)
@@ -883,9 +883,9 @@
         """
         If G is of type Graphics, then del(G[i]) removes the ith distinct
         graphic primitive making up that object.
-        
+
         EXAMPLES::
-        
+
             sage: G = circle((1,1),1) + circle((1,2),1) + circle((1,2),5); print G
             Graphics object consisting of 3 graphics primitives
             sage: len(G)
@@ -902,19 +902,19 @@
         """
         You can replace a GraphicPrimitive (point, line, circle, etc...) in
         a Graphics object G with any other GraphicPrimitive
-        
+
         EXAMPLES::
-        
+
             sage: G = circle((1,1),1) + circle((1,2),1) + circle((1,2),5); print G
             Graphics object consisting of 3 graphics primitives
-        
+
         ::
-        
+
             sage: p = polygon([[1,3],[2,-2],[1,1],[1,3]]); print p
             Graphics object consisting of 1 graphics primitive
-        
+
         ::
-        
+
             sage: G[1] = p[0]
             sage: G    # show the plot
         """
@@ -926,21 +926,21 @@
     def __radd__(self, other):
         """
         Compute and return other + this graphics object.
-        
+
         This only works when other is a Python int equal to 0. In all other
         cases a TypeError is raised. The main reason for this function is
         to make summing a list of graphics objects easier.
-        
+
         EXAMPLES::
-        
+
             sage: S = circle((0,0), 2)
             sage: print int(0) + S
             Graphics object consisting of 1 graphics primitive
             sage: print S + int(0)
             Graphics object consisting of 1 graphics primitive
-        
+
         The following would fail were it not for this function::
-        
+
             sage: v = [circle((0,0), 2), circle((2,3), 1)]
             sage: print sum(v)
             Graphics object consisting of 2 graphics primitives
@@ -954,7 +954,7 @@
         If you have any Graphics object G1, you can always add any other
         amount of Graphics objects G2,G3,... to form a new Graphics object:
         G4 = G1 + G2 + G3.
-        
+
         The xmin, xmax, ymin, and ymax properties of the graphics objects
         are expanded to include all objects in both scenes. If the aspect
         ratio property of either or both objects are set, then the larger
@@ -966,7 +966,7 @@
         legend options are carried over.
 
         EXAMPLES::
-        
+
             sage: g1 = plot(abs(sqrt(x^3-1)), (x,1,5), frame=True)
             sage: g2 = plot(-abs(sqrt(x^3-1)), (x,1,5), color='red')
             sage: g1 + g2  # displays the plot
@@ -1003,7 +1003,7 @@
         else:
             g.set_aspect_ratio( max(self.aspect_ratio(), other.aspect_ratio()))
         return g
-  
+
     def add_primitive(self, primitive):
         """
         Adds a primitive to this graphics object.
@@ -1027,23 +1027,23 @@
         """
         Draw a 2D plot of this graphics object, which just returns this
         object since this is already a 2D graphics object.
-        
+
         EXAMPLES::
-        
+
             sage: S = circle((0,0), 2)
             sage: S.plot() is S
             True
         """
         return self
-        
+
     def plot3d(self, z=0, **kwds):
         """
         Returns an embedding of this 2D plot into the xy-plane of 3D space,
         as a 3D plot object. An optional parameter z can be given to
         specify the z-coordinate.
-        
+
         EXAMPLES::
-        
+
             sage: sum([plot(z*sin(x), 0, 10).plot3d(z) for z in range(6)]) # long time
         """
         from sage.plot.plot3d.base import Graphics3dGroup
@@ -1051,7 +1051,7 @@
         if z:
             g = g.translate(0,0,z)
         return g
-        
+
     @classmethod
     def _extract_kwds_for_show(cls, kwds, ignore=[]):
         """
@@ -1155,11 +1155,11 @@
           is determined by ``figsize`` and the picture fills the figure.
 
         - ``axes`` - (default: True)
-       
+
         - ``axes_labels`` - (default: None) list (or tuple) of two
           strings; the first is used as the label for the horizontal
           axis, and the second for the vertical axis.
-                            
+
         - ``fontsize`` - (default: current setting -- 10) positive
           integer; used for axes labels; if you make this very large,
           you may have to increase figsize to see all labels.
@@ -1270,106 +1270,106 @@
         - ``legend_*`` - all the options valid for :meth:`set_legend_options` prefixed with ``legend_``
 
         EXAMPLES::
-        
+
             sage: c = circle((1,1), 1, color='red')
             sage: c.show(xmin=-1, xmax=3, ymin=-1, ymax=3)
-        
+
         You could also just make the picture larger by changing ``figsize``::
 
             sage: c.show(figsize=8, xmin=-1, xmax=3, ymin=-1, ymax=3)
-        
+
         You can turn off the drawing of the axes::
-        
+
             sage: show(plot(sin,-4,4), axes=False)
-        
+
         You can also label the axes.  Putting something in dollar
         signs formats it as a mathematical expression::
-        
+
             sage: show(plot(sin,-4,4), axes_labels=('$x$','$y$'))
-        
+
         You can turn on the drawing of a frame around the plots::
-        
+
             sage: show(plot(sin,-4,4), frame=True)
-        
+
         You can make the background transparent::
 
             sage: plot(sin(x), (x, -4, 4), transparent=True)
 
         Add grid lines at the major ticks of the axes.
-        
+
         ::
-        
+
             sage: c = circle((0,0), 1)
             sage: c.show(gridlines=True)
             sage: c.show(gridlines="automatic")
             sage: c.show(gridlines="major")
-        
+
         Add grid lines at the major and minor ticks of the axes.
-        
+
         ::
-        
+
             sage: u,v = var('u v')
             sage: f = exp(-(u^2+v^2))
             sage: p = plot_vector_field(f.gradient(), (u,-2,2), (v,-2,2))
             sage: p.show(gridlines="minor")
-        
+
         Add only horizontal or vertical grid lines.
-        
+
         ::
-        
+
             sage: p = plot(sin,-10,20)
             sage: p.show(gridlines=[None, "automatic"])
             sage: p.show(gridlines=["minor", False])
-        
+
         Add grid lines at specific positions (using lists/tuples).
-        
+
         ::
-        
+
             sage: x, y = var('x, y')
             sage: p = implicit_plot((y^2-x^2)*(x-1)*(2*x-3)-4*(x^2+y^2-2*x)^2, \
             ...             (x,-2,2), (y,-2,2), plot_points=1000)
             sage: p.show(gridlines=[[1,0],[-1,0,1]])
-        
+
         Add grid lines at specific positions (using iterators).
-        
+
         ::
-        
+
             sage: def maple_leaf(t):
             ...     return (100/(100+(t-pi/2)^8))*(2-sin(7*t)-cos(30*t)/2)
             sage: p = polar_plot(maple_leaf, -pi/4, 3*pi/2, color="red",plot_points=1000) # long time
             sage: p.show(gridlines=( [-3,-2.75,..,3], xrange(-1,5,2) )) # long time
-        
+
         Add grid lines at specific positions (using functions).
-        
+
         ::
-        
+
             sage: y = x^5 + 4*x^4 - 10*x^3 - 40*x^2 + 9*x + 36
             sage: p = plot(y, -4.1, 1.1)
             sage: xlines = lambda a,b: [z for z,m in y.roots()]
             sage: p.show(gridlines=[xlines, [0]], frame=True, axes=False)
-        
+
         Change the style of all the grid lines.
-        
+
         ::
-        
+
             sage: b = bar_chart([-3,5,-6,11], color='red')
             sage: b.show(gridlines=([-1,-0.5,..,4],True),
             ...     gridlinesstyle=dict(color="blue", linestyle=":"))
-        
+
         Change the style of the horizontal or vertical grid lines
         separately.
-        
+
         ::
-        
+
             sage: p = polar_plot(2 + 2*cos(x), 0, 2*pi, color=hue(0.3))
             sage: p.show(gridlines=True,
             ...     hgridlinesstyle=dict(color="orange", linewidth=1.0),
             ...     vgridlinesstyle=dict(color="blue", linestyle=":"))
-        
+
         Change the style of each grid line individually.
-        
+
         ::
-        
+
             sage: x, y = var('x, y')
             sage: p = implicit_plot((y^2-x^2)*(x-1)*(2*x-3)-4*(x^2+y^2-2*x)^2,
             ...             (x,-2,2), (y,-2,2), plot_points=1000)
@@ -1385,19 +1385,19 @@
             ...    ]
             ...    ),
             ...    gridlinesstyle=dict(marker='x',color="black"))
-        
+
         Grid lines can be added to contour plots.
-        
+
         ::
-        
+
             sage: f = sin(x^2 + y^2)*cos(x)*sin(y)
             sage: c = contour_plot(f, (x, -4, 4), (y, -4, 4), plot_points=100)
             sage: c.show(gridlines=True, gridlinesstyle={'linestyle':':','linewidth':1, 'color':'red'})
-        
+
         Grid lines can be added to matrix plots.
-        
+
         ::
-        
+
             sage: M = MatrixSpace(QQ,10).random_element()
             sage: matrix_plot(M).show(gridlines=True)
 
@@ -1410,10 +1410,10 @@
         ``axes_pad`` to zero.  Compare the following two examples
 
         ::
-        
+
             sage: plot(sin(x), (x, -pi, pi),thickness=2)+point((pi, -1), pointsize=15)
             sage: plot(sin(x), (x, -pi, pi),thickness=2,axes_pad=0)+point((pi, -1), pointsize=15)
-        
+
         Via matplotlib, Sage allows setting of custom ticks.  See above
         for more details.
 
@@ -1556,7 +1556,7 @@
         """
         Return a dictionary whose keys give the xmin, xmax, ymin, and ymax
         data for this graphic.
-        
+
         .. warning::
 
            The returned dictionary is mutable, but changing it does
@@ -1604,7 +1604,91 @@
             ymin -= 1
             ymax += 1
         return {'xmin':xmin, 'xmax':xmax, 'ymin':ymin, 'ymax':ymax}
-        
+
+    def _matplotlib_tick_formatter(self, subplot, locator_options={},
+            tick_formatter=None, ticks=None, xmax=None, xmin=None,
+            ymax=None, ymin=None):
+        r"""
+        Take a matplotlib subplot instance representing the graphic and set
+        the ticks formatting. This function is only for internal use.
+
+        INPUT:
+        - ``subplot`` -- the subplot instance.
+        """
+        # This function is created to refactor some code that is repeated
+        # in the matplotlib function
+        from matplotlib.ticker import FixedLocator, Locator, MaxNLocator, \
+                MultipleLocator, NullLocator, OldScalarFormatter
+
+        x_locator, y_locator = ticks
+        #---------------------- Location of x-ticks ---------------------#
+        if x_locator is None:
+            x_locator = MaxNLocator(**locator_options)
+        elif isinstance(x_locator,Locator):
+            pass
+        elif x_locator == []:
+            x_locator = NullLocator()
+        elif isinstance(x_locator,list):
+            x_locator = FixedLocator(x_locator)
+        else: # x_locator is a number which can be made a float
+            from sage.functions.other import ceil, floor
+            if floor(xmax/x_locator)-ceil(xmin/x_locator)>1:
+                x_locator=MultipleLocator(float(x_locator))
+            else: # not enough room for two major ticks
+                raise ValueError('Expand the range of the independent '
+                'variable to allow two multiples of your tick locator '
+                '(option `ticks`).')
+
+        #---------------------- Location of y-ticks ---------------------#
+        if y_locator is None:
+            y_locator = MaxNLocator(**locator_options)
+        elif isinstance(y_locator,Locator):
+            pass
+        elif y_locator == []:
+            y_locator = NullLocator()
+        elif isinstance(y_locator,list):
+            y_locator = FixedLocator(y_locator)
+        else: # y_locator is a number which can be made a float
+            from sage.functions.other import ceil, floor
+            if floor(ymax/y_locator)-ceil(ymin/y_locator)>1:
+                y_locator=MultipleLocator(float(y_locator))
+            else: # not enough room for two major ticks
+                raise ValueError('Expand the range of the dependent '
+                'variable to allow two multiples of your tick locator '
+                '(option `ticks`).')
+
+        x_formatter, y_formatter = tick_formatter
+        from matplotlib.ticker import FuncFormatter
+        from sage.misc.latex import latex
+        from sage.symbolic.ring import SR
+        #---------------------- Formatting x-ticks ----------------------#
+        if x_formatter is None:
+            x_formatter = OldScalarFormatter()
+        elif x_formatter in SR:
+            from misc import _multiple_of_constant
+            x_const = x_formatter
+            x_formatter = FuncFormatter(lambda n,pos:
+                                        _multiple_of_constant(n,pos,x_const))
+        elif x_formatter == "latex":
+            x_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
+        #---------------------- Formatting y-ticks ----------------------#
+        if y_formatter is None:
+            y_formatter = OldScalarFormatter()
+        elif y_formatter in SR:
+            from misc import _multiple_of_constant
+            y_const = y_formatter
+            y_formatter = FuncFormatter(lambda n,pos:
+                                        _multiple_of_constant(n,pos,y_const))
+        elif y_formatter == "latex":
+            y_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
+
+        subplot.xaxis.set_major_locator(x_locator)
+        subplot.yaxis.set_major_locator(y_locator)
+        subplot.xaxis.set_major_formatter(x_formatter)
+        subplot.yaxis.set_major_formatter(y_formatter)
+
+        return (subplot, x_locator, y_locator, x_formatter, y_formatter)
+
     def matplotlib(self, filename=None,
                    aspect_ratio=None, axes=None, axes_labels=None, axes_pad=0.02,
                    figsize=None, figure=None, fontsize=None, frame=False,
@@ -1617,7 +1701,7 @@
         Return a matplotlib figure object representing the graphic
 
         EXAMPLES::
-        
+
             sage: c = circle((1,1),1)
             sage: print c.matplotlib()
             Figure(640x480)
@@ -1656,14 +1740,14 @@
                 tick_formatter = (tick_formatter, "latex")
             else:
                 tick_formatter = (tick_formatter, None)
-            
+
         self.set_axes_range(xmin, xmax, ymin, ymax)
         d = self.get_axes_range()
         xmin = d['xmin']
         xmax = d['xmax']
         ymin = d['ymin']
         ymax = d['ymax']
-        
+
         x_pad=(xmax-xmin)*float(axes_pad)
         y_pad=(ymax-ymin)*float(axes_pad)
 
@@ -1671,7 +1755,7 @@
         xmax+=x_pad
         ymin-=y_pad
         ymax+=y_pad
-                
+
         global do_verify
         do_verify = verify
 
@@ -1689,7 +1773,7 @@
 
         if figure is None:
             figure=Figure(figsize=figsize)
-        
+
         #the incoming subplot instance
         subplot = sub
         if not subplot:
@@ -1705,11 +1789,11 @@
             g._render_on_subplot(subplot)
             if hasattr(g, '_bbox_extra_artists'):
                 self._bbox_extra_artists.extend(g._bbox_extra_artists)
-        
+
         #add the legend if requested
         if show_legend is None:
             show_legend = self._show_legend
-        
+
         if show_legend:
             from matplotlib.font_manager import FontProperties
             lopts = dict()
@@ -1725,8 +1809,8 @@
                 # color
                 lframe = leg.get_frame()
                 lframe.set_facecolor(color)
-        
-            
+
+
         subplot.set_xlim([xmin, xmax])
         subplot.set_ylim([ymin,ymax])
 
@@ -1739,69 +1823,19 @@
         for spine in subplot.spines.values():
             spine.set_color(self._axes_color)
             spine.set_linewidth(self._axes_width)
-        
+
 
         if frame:
             # For now, set the formatter to the old one, since that is
             # sort of what we are used to.  We should eventually look at
             # the default one to see if we like it better.
 
-            from matplotlib.ticker import OldScalarFormatter, MaxNLocator, MultipleLocator, FixedLocator, NullLocator, Locator
-            x_locator, y_locator = ticks
-            if x_locator is None:
-                x_locator = MaxNLocator(**locator_options)
-            elif isinstance(x_locator,Locator):
-                pass
-            elif x_locator == []:
-                x_locator = NullLocator()
-            elif isinstance(x_locator,list):
-                x_locator = FixedLocator(x_locator)
-            else: # x_locator is a number which can be made a float
-                from sage.functions.other import ceil, floor
-                if floor(xmax/x_locator)-ceil(xmin/x_locator)>1:
-                    x_locator=MultipleLocator(float(x_locator))
-                else: # not enough room for two major ticks
-                    raise ValueError('Expand the range of the independent variable to allow two multiples of your tick locator (option `ticks`).')
-            if y_locator is None:
-                y_locator = MaxNLocator(**locator_options)
-            elif isinstance(y_locator,Locator):
-                pass
-            elif y_locator == []:
-                y_locator = NullLocator()
-            elif isinstance(y_locator,list):
-                y_locator = FixedLocator(y_locator)
-            else: # y_locator is a number which can be made a float
-                from sage.functions.other import ceil, floor
-                if floor(ymax/y_locator)-ceil(ymin/y_locator)>1:
-                    y_locator=MultipleLocator(float(y_locator))
-                else: # not enough room for two major ticks
-                    raise ValueError('Expand the range of the dependent variable to allow two multiples of your tick locator (option `ticks`).')
-
-            x_formatter, y_formatter = tick_formatter
-            from matplotlib.ticker import FuncFormatter
-            from sage.misc.latex import latex
-            if x_formatter is None:
-                x_formatter = OldScalarFormatter()
-            elif x_formatter in SR:
-                from misc import _multiple_of_constant
-                x_const = x_formatter
-                x_formatter = FuncFormatter(lambda n,pos: _multiple_of_constant(n,pos,x_const))
-            elif x_formatter == "latex":
-                x_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
-            if y_formatter is None:
-                y_formatter = OldScalarFormatter()
-            elif y_formatter in SR:
-                from misc import _multiple_of_constant
-                y_const = y_formatter
-                y_formatter = FuncFormatter(lambda n,pos: _multiple_of_constant(n,pos,y_const))
-            elif y_formatter == "latex":
-                y_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
-
-            subplot.xaxis.set_major_locator(x_locator)
-            subplot.yaxis.set_major_locator(y_locator)
-            subplot.xaxis.set_major_formatter(x_formatter)
-            subplot.yaxis.set_major_formatter(y_formatter)
-            
+            subplot, x_locator, y_locator, x_formatter, y_formatter = \
+                    self._matplotlib_tick_formatter(subplot,
+                            locator_options=locator_options,
+                            tick_formatter=tick_formatter, ticks=ticks,
+                            xmax=xmax, xmin=xmin, ymax=ymax, ymin=ymin)
+
             subplot.set_frame_on(True)
             if axes:
                 if ymin<=0 and ymax>=0:
@@ -1810,7 +1844,7 @@
                 if xmin<=0 and xmax>=0:
                     subplot.axvline(color=self._axes_color,
                                     linewidth=self._axes_width)
-            
+
         elif axes:
             ymiddle=False
             xmiddle=False
@@ -1853,67 +1887,16 @@
                 subplot.spines['top'].set_visible(False)
                 xmiddle=True
                 xaxis='bottom'
-            
+
             # For now, set the formatter to the old one, since that is
             # sort of what we are used to.  We should eventually look at
             # the default one to see if we like it better.
-            
-            from matplotlib.ticker import OldScalarFormatter, MaxNLocator, MultipleLocator, FixedLocator, NullLocator, Locator
-            x_locator, y_locator = ticks
-            if x_locator is None:
-                x_locator = MaxNLocator(**locator_options)
-            elif isinstance(x_locator,Locator):
-                pass
-            elif x_locator == []:
-                x_locator = NullLocator()
-            elif isinstance(x_locator,list):
-                x_locator = FixedLocator(x_locator)
-            else: # x_locator is a number which can be made a float
-                from sage.functions.other import ceil, floor
-                if floor(xmax/x_locator)-ceil(xmin/x_locator)>1:
-                    x_locator=MultipleLocator(float(x_locator))
-                else: # not enough room for two major ticks
-                    raise ValueError('Expand the range of the independent variable to allow two multiples of your tick locator (option `ticks`).')
-            if y_locator is None:
-                y_locator = MaxNLocator(**locator_options)
-            elif isinstance(y_locator,Locator):
-                pass
-            elif y_locator == []:
-                y_locator = NullLocator()
-            elif isinstance(y_locator,list):
-                y_locator = FixedLocator(y_locator)
-            else: # y_locator is a number which can be made a float
-                from sage.functions.other import ceil, floor
-                if floor(ymax/y_locator)-ceil(ymin/y_locator)>1:
-                    y_locator=MultipleLocator(float(y_locator))
-                else: # not enough room for two major ticks
-                    raise ValueError('Expand the range of the dependent variable to allow two multiples of your tick locator (option `ticks`).')
-
-            x_formatter, y_formatter = tick_formatter
-            from matplotlib.ticker import FuncFormatter
-            from sage.misc.latex import latex
-            from sage.symbolic.ring import SR
-            if x_formatter is None:
-                x_formatter = OldScalarFormatter()
-            elif x_formatter in SR:
-                from misc import _multiple_of_constant
-                x_const = x_formatter
-                x_formatter = FuncFormatter(lambda n,pos: _multiple_of_constant(n,pos,x_const))
-            elif x_formatter == "latex":
-                x_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
-            if y_formatter is None:
-                y_formatter = OldScalarFormatter()
-            elif y_formatter in SR:
-                from misc import _multiple_of_constant
-                y_const = y_formatter
-                y_formatter = FuncFormatter(lambda n,pos: _multiple_of_constant(n,pos,y_const))
-            elif y_formatter == "latex":
-                y_formatter = FuncFormatter(lambda n,pos: '$%s$'%latex(n))
-
-            subplot.xaxis.set_major_locator(x_locator)
-            subplot.yaxis.set_major_locator(y_locator)
-            subplot.xaxis.set_major_formatter(x_formatter)
-            subplot.yaxis.set_major_formatter(y_formatter)
+
+            subplot, x_locator, y_locator, x_formatter, y_formatter = \
+                    self._matplotlib_tick_formatter(subplot,
+                            locator_options=locator_options,
+                            tick_formatter=tick_formatter, ticks=ticks,
+                            xmax=xmax, xmin=xmin, ymax=ymax, ymin=ymin)
 
             # Make ticklines go on both sides of the axes
             #             if xmiddle:
@@ -1923,7 +1906,7 @@
             #                 for t in subplot.xaxis.get_minorticklines():
             #                     t.set_marker("|")
             #                     t.set_markersize(4)
-            
+
             #             if ymiddle:
             #                 for t in subplot.yaxis.get_majorticklines():
             #                     t.set_marker("|")
@@ -1931,13 +1914,15 @@
             #                 for t in subplot.yaxis.get_minorticklines():
             #                     t.set_marker("|")
             #                     t.set_markersize(4)
-            
+
             # Make the zero tick labels disappear if the axes cross
             # inside the picture
             if xmiddle and ymiddle:
                 from sage.plot.plot import SelectiveFormatter
-                subplot.yaxis.set_major_formatter(SelectiveFormatter(subplot.yaxis.get_major_formatter(),skip_values=[0]))
-                subplot.xaxis.set_major_formatter(SelectiveFormatter(subplot.xaxis.get_major_formatter(),skip_values=[0]))
+                subplot.yaxis.set_major_formatter(SelectiveFormatter(
+                    subplot.yaxis.get_major_formatter(), skip_values=[0]))
+                subplot.xaxis.set_major_formatter(SelectiveFormatter(
+                    subplot.xaxis.get_major_formatter(), skip_values=[0]))
 
         else:
             for spine in subplot.spines.values():
@@ -1974,8 +1959,8 @@
                 subplot.yaxis.get_minorticklines()
             for tickline in ticklines:
                 tickline.set_color(self._axes_color)
-                
-            
+
+
         if gridlines is not None:
             if isinstance(gridlines, (list, tuple)):
                 vgridlines,hgridlines=gridlines
@@ -1999,7 +1984,7 @@
                 hgridstyle['which']='both'
             if vgridlines=='minor':
                 vgridstyle['which']='both'
-                
+
             if hasattr(hgridlines, '__iter__'):
                 hlines=iter(hgridlines)
                 hgridstyle.pop("minor",None)
@@ -2040,7 +2025,7 @@
             label_options['size']=self._fontsize
             subplot.set_xlabel(self._axes_labels[0], **label_options)
             subplot.set_ylabel(self._axes_labels[1], **label_options)
-                
+
 
             if axes is True and frame is False:
                 # We set the label positions according to where we are
@@ -2074,23 +2059,27 @@
                 xlabel.set_horizontalalignment(xaxis_horiz)
                 xlabel.set_verticalalignment(xaxis_vert)
                 trans=subplot.spines[xaxis].get_transform()
-                labeltrans=offset_copy(trans, figure, x=xaxis_labeloffset, y=0, units='points')
-                subplot.xaxis.set_label_coords(x=xaxis_labelx,y=xaxis_labely,transform=labeltrans)
+                labeltrans=offset_copy(trans, figure, x=xaxis_labeloffset,
+                        y=0, units='points')
+                subplot.xaxis.set_label_coords(x=xaxis_labelx,
+                        y=xaxis_labely,transform=labeltrans)
 
                 ylabel=subplot.yaxis.get_label()
                 ylabel.set_horizontalalignment('center')
                 ylabel.set_verticalalignment(yaxis_vert)
                 ylabel.set_rotation('horizontal')
                 trans=subplot.spines[yaxis].get_transform()
-                labeltrans=offset_copy(trans, figure, x=0, y=yaxis_labeloffset, units='points')
-                subplot.yaxis.set_label_coords(x=yaxis_labelx,y=yaxis_labely,transform=labeltrans)
+                labeltrans=offset_copy(trans, figure, x=0,
+                        y=yaxis_labeloffset, units='points')
+                subplot.yaxis.set_label_coords(x=yaxis_labelx,
+                        y=yaxis_labely,transform=labeltrans)
 
         # This option makes the xlim and ylim limits not take effect
         # todo: figure out which limits were specified, and let the
         # free limits autoscale
         #subplot.autoscale_view(tight=True)
         return figure
-        
+
     # ALLOWED_EXTENSIONS is the list of recognized formats.
     # filename argument is written explicitly so that it can be used as a
     # positional one, which is a very likely usage for this function.
@@ -2108,35 +2097,35 @@
     def save(self, filename=None, **kwds):
         r"""
         Save the graphics to an image file.
-       
+
         INPUT:
-        
+
         - ``filename`` -- a string (default: autogenerated), the filename and
           the image format given by the extension, which can be one of the
           following:
-         
+
             * ``.eps``,
-           
+
             * ``.pdf``,
-           
+
             * ``.png``,
-           
+
             * ``.ps``,
-           
+
             * ``.sobj`` (for a Sage object you can load later),
-            
+
             * ``.svg``,
-           
+
             * empty extension will be treated as ``.sobj``.
-           
+
         All other keyword arguments will be passed to the plotter.
-        
+
         OUTPUT:
-        
+
         - none.
 
         EXAMPLES::
-        
+
             sage: c = circle((1,1), 1, color='red')
             sage: filename = os.path.join(SAGE_TMP, 'test.png')
             sage: c.save(filename, xmin=-1, xmax=3, ymin=-1, ymax=3)
@@ -2152,17 +2141,17 @@
 
             sage: c.save(filename, figsize=[8,4], fig_tight=False,
             ...       xmin=-1, xmax=3, ymin=-1, ymax=3)
-        
+
         You can also pass extra options to the plot command instead of this
         method, e.g. ::
-        
+
             sage: plot(x^2 - 5, (x, 0, 5), ymin=0).save(
             ...       sage.misc.misc.tmp_filename() + '.png')
-            
+
         will save the same plot as the one shown by this command::
-        
+
             sage: plot(x^2 - 5, (x, 0, 5), ymin=0)
-            
+
         (This test verifies that :trac:`8632` is fixed.)
 
         TESTS:
@@ -2191,13 +2180,13 @@
         dpi = options.pop('dpi')
         transparent = options.pop('transparent')
         fig_tight = options.pop('fig_tight')
-        
+
         if filename is None:
             filename = options.pop('filename')
         if filename is None:
             filename = sage.misc.misc.graphics_filename()
         ext = os.path.splitext(filename)[1].lower()
-        
+
         if ext not in ALLOWED_EXTENSIONS:
             raise ValueError("allowed file extensions for images are '"
                              + "', '".join(ALLOWED_EXTENSIONS) + "'!")
@@ -2205,7 +2194,8 @@
             SageObject.save(self, filename)
         else:
             figure = self.matplotlib(**options)
-            # You can output in PNG, PS, EPS, PDF, or SVG format, depending on the file extension.
+            # You can output in PNG, PS, EPS, PDF, or SVG format, depending
+            # on the file extension.
             # matplotlib looks at the file extension to see what the renderer should be.
             # The default is FigureCanvasAgg for PNG's because this is by far the most
             # common type of files rendered, like in the notebook, for example.
@@ -2214,7 +2204,7 @@
             figure.set_canvas(FigureCanvasAgg(figure))
             # this messes up the aspect ratio!
             #figure.canvas.mpl_connect('draw_event', pad_for_tick_labels)
-            
+
             # tight_layout adjusts the *subplot* parameters so ticks aren't cut off, etc.
             figure.tight_layout()
 
@@ -2366,7 +2356,7 @@
             6
         """
         return self._cols
-    
+
     def __getitem__(self, i):
         """
         Return the ``i``th element of the list of graphics
@@ -2424,7 +2414,7 @@
         """
         i = int(i)
         self._glist[i] = g
-        
+
     def _set_figsize_(self, ls):
         """
         Set the figsize of all plots in the array.
@@ -2555,7 +2545,7 @@
              axes = None, **args):
         r"""
         Show this graphics array using the default viewer.
-        
+
         OPTIONAL INPUT:
 
         -  ``filename`` - (default: None) string
