# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1359976914 -28800
# Node ID 27124754e046bebe1afba5c0f5a8e7a44b4e7943
# Parent  5149624d99e0a7de3dd1d1465092a4a842a30e16
fix return of nan by using pari

diff --git a/sage/rings/arith.py b/sage/rings/arith.py
--- a/sage/rings/arith.py
+++ b/sage/rings/arith.py
@@ -3072,31 +3072,31 @@
 def binomial(x, m, **kwds):
     r"""
     Return the binomial coefficient
-    
+
     .. math::
-    
+
                 \binom{x}{m} = x (x-1) \cdots (x-m+1) / m!
 
 
     which is defined for `m \in \ZZ` and any
     `x`. We extend this definition to include cases when
     `x-m` is an integer but `m` is not by
-    
+
     .. math::
-    
+
         \binom{x}{m}= \binom{x}{x-m}
 
     If `m < 0`, return `0`.
-    
+
     INPUT:
-        
+
     -  ``x``, ``m`` - numbers or symbolic expressions. Either ``m``
        or ``x-m`` must be an integer.
-        
+
     OUTPUT: number or symbolic expression (if input is symbolic)
-    
+
     EXAMPLES::
-    
+
         sage: binomial(5,2)
         10
         sage: binomial(2,0)
@@ -3138,29 +3138,34 @@
     TESTS:
 
     We test that certain binomials are very fast (this should be
-    instant) -- see trac 3309::
-    
-        sage: a = binomial(RR(1140000.78), 42000000)
-
-    We test conversion of arguments to Integers -- see trac 6870::
+    instant) -- see :trac:`3309`::
+
+        sage: a = binomial(RR(1140000.78), 23310000)
+
+    We test conversion of arguments to Integers -- see :trac:`6870`::
 
         sage: binomial(1/2,1/1)
         1/2
         sage: binomial(10^20+1/1,10^20)
         100000000000000000001
-        sage: binomial(SR(10**7),10**7) 
+        sage: binomial(SR(10**7),10**7)
         1
         sage: binomial(3/2,SR(1/1))
         3/2
 
-    Some floating point cases -- see trac 7562 and trac 9633::
-
-        sage: binomial(1.,3) 
+    Some floating point cases -- see :trac:`7562`, :trac:`9633`, and
+    :trac:`12448`::
+
+        sage: binomial(1.,3)
         0.000000000000000
         sage: binomial(-2.,3)
         -4.00000000000000
         sage: binomial(0.5r, 5)
         0.02734375
+        sage: a = binomial(float(1001), float(1)); a
+        1001.0
+        sage: type(a)
+        <type 'float'>
 
     Test symbolic and uni/multivariate polynomials::
 
@@ -3200,22 +3205,12 @@
             except AttributeError:
                 pass
             raise TypeError, 'Either m or x-m must be an integer'
-    # a (hopefully) temporary fix for #3309; eventually Pari should do
-    # this for us.
     if isinstance(x, (float, sage.rings.real_mpfr.RealNumber,
                       sage.rings.real_mpfr.RealLiteral)):
         P = parent(x)
         if m < 0:
             return P(0)
-        from sage.functions.all import gamma
-        if x > -1/2:
-            a = gamma(x-m+1)
-            if a:
-                return gamma(x+1)/gamma(P(m+1))/a
-            else:
-                return P(0)
-        else:
-            return (-1)**m*gamma(m-x)/gamma(P(m+1))/gamma(-x)
+        return P(pari(x).binomial(m))
     if isinstance(x,sage.symbolic.expression.Expression):
         try:
             x=x.pyobject()
@@ -3237,7 +3232,7 @@
             if m > s:
                 raise ValueError("binomial not implemented for "
                         "m > " + str(s) + ".\nThis is probably OK, "
-                        "since the answer would have " 
+                        "since the answer would have "
                         "billions of digits.")
 
         return x.binomial(m, **kwds)
