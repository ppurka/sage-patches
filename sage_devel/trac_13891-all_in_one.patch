# HG changeset patch
# User Nathann Cohen <nathann.cohen@gmail.com>
# Date 1356905040 -3600
# Node ID 3d4e52b7a98a7f48af1745b750476350e68bff3d
# Parent  7db181072bee133999531acef36c1f413e7c3347
Default parameters for Graph.plot() and Graph.show()
* * *
Default parameters for Graph.plot() and Graph.show() -- second pass
* * *
Default parameters for Graph.plot() and Graph.show() -- third pass
* * *
Default parameters for Graph.plot() and Graph.show() -- typos and useless graphplot method

diff --git a/sage/combinat/posets/posets.py b/sage/combinat/posets/posets.py
--- a/sage/combinat/posets/posets.py
+++ b/sage/combinat/posets/posets.py
@@ -1310,7 +1310,6 @@
         return list(self.linear_extension())
 
     def plot(self, label_elements=True, element_labels=None,
-             label_font_size=12,label_font_color='black',
              vertex_size=300, vertex_colors=None,
              layout = 'acyclic',
              **kwds):
@@ -1370,15 +1369,12 @@
         if label_elements and element_labels is not None:
             graph = graph.relabel(dict((self(element),label) for (element,label) in element_labels.items()), inplace = False)
         return graph.plot(vertex_labels=label_elements,
-                          label_font_size=label_font_size,
-                          label_font_color=label_font_color,
                           vertex_size=vertex_size,
                           vertex_colors=vertex_colors,
                           layout = layout,
                           **kwds)
 
     def show(self, label_elements=True, element_labels=None,
-            label_font_size=12,label_font_color='black',
             vertex_size=300, vertex_colors=None, layout='acyclic', **kwds):
         """
         Shows the Graphics object corresponding the Hasse diagram of the
@@ -1403,7 +1399,6 @@
             sage: D.show(element_labels=elm_labs)
         """
         self.plot(label_elements=label_elements, element_labels=element_labels,
-            label_font_size=label_font_size,label_font_color=label_font_color,
             vertex_size=vertex_size, vertex_colors=vertex_colors, layout=layout).show(**kwds)
 
     def level_sets(self):
diff --git a/sage/graphs/generic_graph.py b/sage/graphs/generic_graph.py
--- a/sage/graphs/generic_graph.py
+++ b/sage/graphs/generic_graph.py
@@ -309,6 +309,7 @@
 from sage.rings.rational import Rational
 from generic_graph_pyx import GenericGraph_pyx, spring_layout_fast
 from sage.graphs.dot2tex_utils import assert_have_dot2tex
+from sage.misc.superseded import deprecated_function_alias
 
 class GenericGraph(GenericGraph_pyx):
     """
@@ -323,7 +324,7 @@
         Every graph carries a dictionary of options, which is set
         here to ``None``.  Some options are added to the global
         :data:`sage.misc.latex.latex` instance which will insure
-        that if `\mbox{\rm\LaTeX}` is used to render the graph,
+        that if LaTeX is used to render the graph,
         then the right packages are loaded and MathJax reacts
         properly.
 
@@ -592,8 +593,9 @@
         return s
 
     def _latex_(self):
-        r""" Returns a string to render the graph using
-        `\mbox{\rm{\LaTeX}}`.
+        r"""
+
+        Returns a string to render the graph using LaTeX.
 
         To adjust the string, use the
         :meth:`set_latex_options` method to set options,
@@ -13699,10 +13701,9 @@
         Returns an instance of
         :class:`~sage.graphs.graph_latex.GraphLatex` for the graph.
 
-        Changes to this object will affect the `\mbox{\rm\LaTeX}`
-        version of the graph.    For a full explanation of
-        how to use LaTeX to render graphs, see the introduction to the
-        :mod:`~sage.graphs.graph_latex` module.
+        Changes to this object will affect the LaTeX version of the graph.  For
+        a full explanation of how to use LaTeX to render graphs, see the
+        introduction to the :mod:`~sage.graphs.graph_latex` module.
 
         EXAMPLES::
 
@@ -13800,17 +13801,18 @@
         Here is the list of all the available layout options::
 
             sage: from sage.graphs.graph_plot import layout_options
-            sage: list(sorted(layout_options.iteritems()))
-            [('by_component', 'Whether to do the spring layout by connected component -- a boolean.'),
-             ('dim', 'The dimension of the layout -- 2 or 3.'),
-             ('heights', 'A dictionary mapping heights to the list of vertices at this height.'),
-             ('iterations', 'The number of times to execute the spring layout algorithm.'),
-             ('layout', 'A layout algorithm -- one of "acyclic", "circular", "ranked", "graphviz", "planar", "spring", or "tree".'),
-             ('prog', 'Which graphviz layout program to use -- one of "circo", "dot", "fdp", "neato", or "twopi".'),
-             ('save_pos', 'Whether or not to save the computed position for the graph.'),
-             ('spring', 'Use spring layout to finalize the current layout.'),
-             ('tree_orientation', 'The direction of tree branches -- "up" or "down".'),
-             ('tree_root', 'A vertex designation for drawing trees.')]
+            sage: for key, value in list(sorted(layout_options.iteritems())):
+            ...      print "option", key, ":", value
+            option by_component : Whether to do the spring layout by connected component -- a boolean.
+            option dim : The dimension of the layout -- 2 or 3.
+            option heights : A dictionary mapping heights to the list of vertices at this height.
+            option iterations : The number of times to execute the spring layout algorithm.
+            option layout : A layout algorithm -- one of : "acyclic", "circular" (plots the graph with vertices evenly distributed on a circle), "ranked", "graphviz", "planar", "spring" (traditional spring layout, using the graph's current positions as initial positions), or "tree" (the tree will be plotted in levels, depending on minimum distance for the root).
+            option prog : Which graphviz layout program to use -- one of "circo", "dot", "fdp", "neato", or "twopi".
+            option save_pos : Whether or not to save the computed position for the graph.
+            option spring : Use spring layout to finalize the current layout.
+            option tree_orientation : The direction of tree branches -- "up" or "down".
+            option tree_root : A vertex designation for drawing trees. a vertex of the tree to be used as the root for the ``layout="tree"`` option. If no root is specified, then one is chosen at random. Ignored unless ``layout='tree'``
 
         Some of them only apply to certain layout algorithms. For
         details, see :meth:`.layout_acyclic`, :meth:`.layout_planar`,
@@ -14187,22 +14189,14 @@
 
         return [xmin, xmax, ymin, ymax]
 
-
-
-    @options(vertex_size=200, vertex_labels=True, layout=None,
-            edge_style='solid', edge_color='black',edge_colors=None, edge_labels=False, 
-            iterations=50, tree_orientation='down', heights=None, graph_border=False, 
-            talk=False, color_by_label=False, partition=None,
-            dist = .075, max_dist=1.5, loop_size=.075)
     def graphplot(self, **options):
         """
         Returns a GraphPlot object.
-        
-        
+
         EXAMPLES:
-        
+
         Creating a graphplot object uses the same options as graph.plot()::
-        
+
             sage: g = Graph({}, loops=True, multiedges=True, sparse=True)
             sage: g.add_edges([(0,0,'a'),(0,0,'b'),(0,1,'c'),(0,1,'d'),
             ...     (0,1,'e'),(0,1,'f'),(0,1,'f'),(2,1,'g'),(2,2,'h')])
@@ -14211,7 +14205,7 @@
             sage: GP.plot()
 
         We can modify the graphplot object.  Notice that the changes are cumulative::
-        
+
             sage: GP.set_edges(edge_style='solid')
             sage: GP.plot()
             sage: GP.set_vertices(talk=True)
@@ -14220,48 +14214,42 @@
         from sage.graphs.graph_plot import GraphPlot
         return GraphPlot(graph=self, options=options)
 
-    @options(vertex_size=200, vertex_labels=True, layout=None,
-            edge_style='solid', edge_color = 'black', edge_colors=None, edge_labels=False, 
-            iterations=50, tree_orientation='down', heights=None, graph_border=False, 
-            talk=False, color_by_label=False, partition=None,
-            dist = .075, max_dist=1.5, loop_size=.075)
+    @options()
     def plot(self, **options):
         r"""
         Returns a graphics object representing the (di)graph.
-        See also the :mod:`sage.graphs.graph_latex` module for ways
-        to use  `\mbox{\rm\LaTeX}` to produce an image of a graph.
-        
-        INPUT:
-            
+
+        INPUT:
+
         - ``pos`` - an optional positioning dictionary
-            
+
         - ``layout`` - what kind of layout to use, takes precedence
           over pos
-                
+
            - 'circular' -- plots the graph with vertices evenly
              distributed on a circle
-             
+
            - 'spring' - uses the traditional spring layout, using the
              graph's current positions as initial positions
-                
+
            - 'tree' - the (di)graph must be a tree. One can specify
              the root of the tree using the keyword tree_root,
              otherwise a root will be selected at random. Then the
              tree will be plotted in levels, depending on minimum
              distance for the root.
-            
+
         - ``vertex_labels`` - whether to print vertex labels
 
         - ``edge_labels`` - whether to print edge labels. By default,
           False, but if True, the result of str(l) is printed on the
           edge for each label l. Labels equal to None are not printed
           (to set edge labels, see set_edge_label).
-            
+
         - ``vertex_size`` - size of vertices displayed
 
         - ``vertex_shape`` - the shape to draw the vertices (Not
           available for multiedge digraphs.)
-                
+
         - ``graph_border`` - whether to include a box around the graph
 
         - ``vertex_colors`` - optional dictionary to specify vertex
@@ -14269,7 +14257,7 @@
           each corresponding entry is a list of vertices. If a vertex
           is not listed, it looks invisible on the resulting plot (it
           doesn't get drawn).
-                
+
         - ``edge_colors`` - a dictionary specifying edge colors: each
           key is a color recognized by matplotlib, and each entry is a
           list of edges.
@@ -14288,7 +14276,7 @@
 
         - ``heights`` - if specified, this is a dictionary from a set
           of floating point heights to a set of vertices
-                
+
         - ``edge_style`` - keyword arguments passed into the
           edge-drawing routine.  This currently only works for
           directed graphs, since we pass off the undirected graph to
@@ -14296,17 +14284,32 @@
 
         - ``tree_root`` - a vertex of the tree to be used as the root
           for the layout="tree" option. If no root is specified, then one
-          is chosen at random. Ignored unless layout='tree'. 
-
-        - ``tree_orientation`` - "up" or "down" (default is "down"). 
+          is chosen at random. Ignored unless layout='tree'.
+
+        - ``tree_orientation`` - "up" or "down" (default is "down").
           If "up" (resp., "down"), then the root of the tree will
           appear on the bottom (resp., top) and the tree will grow
           upwards (resp. downwards). Ignored unless layout='tree'.
 
         - ``save_pos`` - save position computed during plotting
-            
-        EXAMPLES::
-        
+
+        .. NOTE::
+
+            - See the documentation of the :mod:`sage.graphs.graph_plot` module
+              for information and examples of how to define parameters that will
+              be applied to **all** graph plots.
+
+            - Default parameters for this method *and a specific graph* can also
+              be set through the :class:`~sage.misc.decorators.options`
+              mechanism. For more information on this different way to set
+              default parameters, see the help of the :class:`options decorator
+              <~sage.misc.decorators.options>`.
+
+            - See also the :mod:`sage.graphs.graph_latex` module for ways to use
+              LaTeX to produce an image of a graph.
+
+        EXAMPLES::
+
             sage: from sage.graphs.graph_plot import graphplot_options
             sage: list(sorted(graphplot_options.iteritems()))
             [...]
@@ -14483,7 +14486,6 @@
         
             sage: G=Graph({'a':['a','b','b','b','e'],'b':['c','d','e'],'c':['c','d','d','d'],'d':['e']},sparse=True)
             sage: G.show(pos={'a':[0,1],'b':[1,1],'c':[2,0],'d':[1,0],'e':[0,0]})
-        
         """
         from sage.graphs.graph_plot import GraphPlot
         return GraphPlot(graph=self, options=options).plot()
@@ -14491,33 +14493,38 @@
     def show(self, **kwds):
         """
         Shows the (di)graph.
-        
+
         For syntax and lengthy documentation, see G.plot?. Any options not
         used by plot will be passed on to the Graphics.show method.
-        
-        EXAMPLES::
-        
+
+        .. NOTE::
+
+            See the documentation of the :mod:`sage.graphs.graph_plot` module
+            for information on default arguments of this method.
+
+        EXAMPLES::
+
             sage: C = graphs.CubeGraph(8)
             sage: P = C.plot(vertex_labels=False, vertex_size=0, graph_border=True)
             sage: P.show()  # long time (3s on sage.math, 2011)
         """
-        kwds.setdefault('figsize', [4,4])
+        from sage.graphs.graph_plot import GraphPlot
         from graph_plot import graphplot_options
-        vars = graphplot_options.keys()
-        plot_kwds = {}
-        for kwd in vars:
-            if kwds.has_key(kwd):
-                plot_kwds[kwd] = kwds.pop(kwd)
-        self.plot(**plot_kwds).show(**kwds)
+
+        # This dictionary only contains the options that graphplot
+        # understands. These options are removed from kwds at the same
+        # time.
+        plot_kwds = {k:kwds.pop(k) for k in graphplot_options if k in kwds}
 
     def plot3d(self, bgcolor=(1,1,1), vertex_colors=None, vertex_size=0.06,
                      edge_colors=None, edge_size=0.02, edge_size2=0.0325,
                      pos3d=None, color_by_label=False,
                      engine='jmol', **kwds):
         r"""
-        Plot a graph in three dimensions.    See also the
-        :mod:`sage.graphs.graph_latex` module for ways to use
-        `\mbox{\rm\LaTeX}` to produce an image of a graph.
+        Plot a graph in three dimensions.
+
+        See also the :mod:`sage.graphs.graph_latex` module for ways to use LaTeX
+        to produce an image of a graph.
         
         INPUT:
         
diff --git a/sage/graphs/graph_plot.py b/sage/graphs/graph_plot.py
--- a/sage/graphs/graph_plot.py
+++ b/sage/graphs/graph_plot.py
@@ -1,6 +1,8 @@
 """
 Graph Plotting
 
+*(For LaTeX drawings of graphs, see the* :mod:`~sage.graphs.graph_latex` *module.)*
+
 All graphs have an associated Sage graphics object, which you can display::
 
     sage: G = graphs.WheelGraph(15)
@@ -22,8 +24,109 @@
 random and empty graphs), the position dictionary is filled in, instead of using
 the spring-layout algorithm.
 
-Functions and methods
----------------------
+**Plot options**
+
+Here is the list of options accepted by :meth:`GenericGraph.plot` and the
+constructor of :class:`GraphPlot`.
+
+.. csv-table::
+    :class: contentstable
+    :widths: 30, 70
+    :delim: |
+
+"""
+
+layout_options =   {
+                    'layout': 'A layout algorithm -- one of : "acyclic", "circular" (plots the graph with vertices evenly distributed on a circle), "ranked", "graphviz", "planar", "spring" (traditional spring layout, using the graph\'s current positions as initial positions), or "tree" (the tree will be plotted in levels, depending on minimum distance for the root).',
+                    'iterations': 'The number of times to execute the spring layout algorithm.',
+                    'heights': 'A dictionary mapping heights to the list of vertices at this height.',
+                    'spring': 'Use spring layout to finalize the current layout.',
+                    'tree_root': 'A vertex designation for drawing trees. a vertex of the tree to be used as the root for the ``layout="tree"`` option. If no root is specified, then one is chosen at random. Ignored unless ``layout=\'tree\'``',
+                    'tree_orientation': 'The direction of tree branches -- "up" or "down".',
+                    'save_pos': 'Whether or not to save the computed position for the graph.',
+                    'dim': 'The dimension of the layout -- 2 or 3.',
+                    'prog': 'Which graphviz layout program to use -- one of "circo", "dot", "fdp", "neato", or "twopi".',
+                    'by_component': 'Whether to do the spring layout by connected component -- a boolean.',
+                    }
+
+graphplot_options = layout_options.copy()
+
+graphplot_options.update(
+                   {'pos': 'The position dictionary of vertices',
+                    'vertex_labels': 'Whether or not to draw vertex labels.',
+                    'vertex_colors': 'Dictionary of vertex coloring : each key is a color recognizable by matplotlib, and each corresponding entry is a list of vertices. If a vertex is not listed, it looks invisible on the resulting plot (it doesn\'t get drawn).',
+                    'vertex_size': 'The size to draw the vertices.',
+                    'vertex_shape': 'The shape to draw the vertices, Currently unavailable for Multi-edged DiGraphs.',
+                    'edge_labels': 'Whether or not to draw edge labels.',
+                    'edge_style': 'The linestyle of the edges-- one of "solid", "dashed", "dotted", dashdot". This currently only works for directed graphs, since we pass off the undirected graph to networkx',
+                    'edge_color': 'The default color for edges.',
+                    'edge_colors': 'a dictionary specifying edge colors: each key is a color recognized by matplotlib, and each entry is a list of edges.',
+                    'color_by_label': 'Whether or not to color the edges by their label values.',
+                    'partition': 'A partition of the vertex set.  If specified, plot will show each cell in a different color. vertex_colors takes precedence.',
+                    'loop_size': 'The radius of the smallest loop.',
+                    'dist': 'The distance between multiedges.',
+                    'max_dist': 'The max distance range to allow multiedges.',
+                    'talk': 'Whether to display the vertices in talk mode (larger and white)',
+                    'graph_border': 'Whether or not to draw a frame around the graph.'})
+
+for key, value in graphplot_options.iteritems():
+    __doc__ += "    ``"+str(key)+"`` | "+str(value)+"\n"
+
+
+__doc__ += """
+**Default options**
+
+This module defines two dictionaries containing default options for the
+:meth:`GenericGraph.plot` and :meth:`GenericGraph.show` methods. These two
+dictionaries are ``sage.graphs.graph_plot.DEFAULT_SHOW_OPTIONS`` and
+``sage.graphs.graph_plot.DEFAULT_PLOT_OPTIONS``.
+
+Obviously, these values are overruled when arguments are given explicitely.
+
+Here is how to define the default size of a graph drawing to be ``[6,6]``. The
+first two calls to :meth:`~sage.graphs.generic_graph.show` use this option,
+while the third does not (a value for ``figsize`` is explicitely given)::
+
+    sage: sage.graphs.graph_plot.DEFAULT_SHOW_OPTIONS['figsize'] = [6,6]
+    sage: graphs.PetersenGraph().show() # long time
+    sage: graphs.ChvatalGraph().show()  # long time
+    sage: graphs.PetersenGraph().show(figsize=[4,4]) # long time
+
+We can now reset the default to its initial value, and now display graphs as
+previously::
+
+    sage: sage.graphs.graph_plot.DEFAULT_SHOW_OPTIONS['figsize'] = [4,4]
+    sage: graphs.PetersenGraph().show() # long time
+    sage: graphs.ChvatalGraph().show()  # long time
+
+.. NOTE::
+
+   In order to define a default value permanently, you can add a couple of lines to
+   :doc:`Sage's startup scripts <../../startup>`. Example ::
+
+       sage: import sage.graphs.graph_plot
+       sage: sage.graphs.graph_plot.DEFAULT_SHOW_OPTIONS['figsize'] = [4,4]
+
+**Index of methods and functions**
+
+.. csv-table::
+    :class: contentstable
+    :widths: 30, 70
+    :delim: |
+
+    :meth:`GraphPlot.set_pos` | Sets the position plotting parameters for this GraphPlot.
+    :meth:`GraphPlot.set_vertices` | Sets the vertex plotting parameters for this GraphPlot.
+    :meth:`GraphPlot.set_edges` | Sets the edge (or arrow) plotting parameters for the GraphPlot object.
+    :meth:`GraphPlot.show` | Shows the (Di)Graph associated with this GraphPlot object.
+    :meth:`GraphPlot.plot` | Returns a graphics object representing the (di)graph.
+    :meth:`GraphPlot.layout_tree` | Compute a nice layout of a tree.
+    :meth:`~sage.graphs.graph_plot._circle_embedding` | Sets some vertices on a circle in the embedding of a graph G.
+    :meth:`~sage.graphs.graph_plot._line_embedding` | Sets some vertices on a line in the embedding of a graph G.
+
+Methods and classes
+-------------------
+.. autofunction:: _circle_embedding
+.. autofunction:: _line_embedding
 """
 
 #*****************************************************************************
@@ -46,37 +149,29 @@
 from sage.misc.decorators import options
 from math import sqrt, cos, sin, atan, pi
 
-layout_options =   {
-                    'layout': 'A layout algorithm -- one of "acyclic", "circular", "ranked", "graphviz", "planar", "spring", or "tree".',
-                    'iterations': 'The number of times to execute the spring layout algorithm.',
-                    'heights': 'A dictionary mapping heights to the list of vertices at this height.',
-                    'spring': 'Use spring layout to finalize the current layout.',
-                    'tree_root': 'A vertex designation for drawing trees.',
-                    'tree_orientation': 'The direction of tree branches -- "up" or "down".',
-                    'save_pos': 'Whether or not to save the computed position for the graph.',
-                    'dim': 'The dimension of the layout -- 2 or 3.',
-                    'prog': 'Which graphviz layout program to use -- one of "circo", "dot", "fdp", "neato", or "twopi".',
-                    'by_component': 'Whether to do the spring layout by connected component -- a boolean.',
-                    }
+DEFAULT_SHOW_OPTIONS = {
+    "figsize"             : [4,4]
+    }
 
-graphplot_options = layout_options.copy()
-graphplot_options.update(
-                   {'pos': 'The position dictionary of vertices',
-                    'vertex_labels': 'Whether or not to draw vertex labels.',
-                    'vertex_colors': 'Dictionary of vertex coloring.',
-                    'vertex_size': 'The size to draw the vertices.',
-                    'vertex_shape': 'The shape to draw the vertices, Currently unavailable for Multi-edged DiGraphs.',
-                    'edge_labels': 'Whether or not to draw edge labels.',
-                    'edge_style': 'The linestyle of the edges-- one of "solid", "dashed", "dotted", dashdot".',
-                    'edge_color': 'The default color for edges.',
-                    'edge_colors': 'Dictionary of edge coloring.',
-                    'color_by_label': 'Whether or not to color the edges by their label values.',
-                    'partition': 'A partition of the vertex set.  (Draws each cell of vertices in a different color).',
-                    'loop_size': 'The radius of the smallest loop.',
-                    'dist': 'The distance between multiedges.',
-                    'max_dist': 'The max distance range to allow multiedges.',
-                    'talk': 'Whether to display the vertices in talk mode (larger and white)',
-                    'graph_border': 'Whether or not to draw a frame around the graph.'})
+DEFAULT_PLOT_OPTIONS = {
+    "vertex_size"         : 200,
+    "vertex_labels"       : True,
+    "layout"              : None,
+    "edge_style"          : 'solid',
+    "edge_color"          : 'black',
+    "edge_colors"         : None,
+    "edge_labels"         : False,
+    "iterations"          : 50,
+    "tree_orientation"    : 'down',
+    "heights"             : None,
+    "graph_border"        : False,
+    "talk"                : False,
+    "color_by_label"      : False,
+    "partition"           : None,
+    "dist"                : .075,
+    "max_dist"            : 1.5,
+    "loop_size"           : .075
+    }
 
 class GraphPlot(SageObject):
     def __init__(self, graph, options):
@@ -85,27 +180,27 @@
         plotting (Di)Graphs.  A ``GraphPlot`` has a plot and show function, as well
         as some functions to set parameters for vertices and edges.  This constructor
         assumes default options are set.  Defaults are shown in the example below.
-        
+
         EXAMPLE::
 
             sage: from sage.graphs.graph_plot import GraphPlot
             sage: options = {
-            ...     'vertex_size':200, 
-            ...     'vertex_labels':True, 
+            ...     'vertex_size':200,
+            ...     'vertex_labels':True,
             ...     'layout':None,
-            ...     'edge_style':'solid', 
-            ...     'edge_color':'black', 
-            ...     'edge_colors':None, 
-            ...     'edge_labels':False, 
-            ...     'iterations':50, 
-            ...     'tree_orientation':'down', 
-            ...     'heights':None, 
-            ...     'graph_border':False, 
-            ...     'talk':False, 
-            ...     'color_by_label':False, 
+            ...     'edge_style':'solid',
+            ...     'edge_color':'black',
+            ...     'edge_colors':None,
+            ...     'edge_labels':False,
+            ...     'iterations':50,
+            ...     'tree_orientation':'down',
+            ...     'heights':None,
+            ...     'graph_border':False,
+            ...     'talk':False,
+            ...     'color_by_label':False,
             ...     'partition':None,
-            ...     'dist':.075, 
-            ...     'max_dist':1.5, 
+            ...     'dist':.075,
+            ...     'max_dist':1.5,
             ...     'loop_size':.075}
             sage: g = Graph({0:[1,2], 2:[3], 4:[0,1]})
             sage: GP = GraphPlot(g, options)
@@ -114,7 +209,31 @@
 
             sage: g = graphs.CompleteGraph(2); g.show()
 
+        Wrong input::
+
+            sage: graphs.PetersenGraph().plot(kujhfuhf="23")
+            doctest:...: DeprecationWarning: You provided kujhfuhf as an
+            argument to a function which has always silently ignored its
+            inputs. This method may soon be updated so that the method raises an
+            exception instead of this warning, which will break your code : to
+            be on the safe side, update it !
+            ...
         """
+        # Setting the default values if needed
+        for k,value in DEFAULT_PLOT_OPTIONS.iteritems():
+            if k not in options:
+                options[k] = value
+
+        for opt in options:
+            if not opt in graphplot_options:
+                from sage.misc.superseded import deprecation
+                deprecation(13891, ("You provided "+str(opt)+" as an argument to a "
+                                    "function which has always silently ignored "
+                                    "its inputs. This method may soon be updated "
+                                    "so that the method raises an exception "
+                                    "instead of this warning, which will break "
+                                    "your code : to be on the safe side, update it !"))
+
         self._plot_components = {}
         self._nodelist = graph.vertices()
         self._graph = graph
@@ -126,9 +245,10 @@
             self._arcdigraph = True
         else:
             self._arcdigraph = False
+
         self.set_vertices()
         self.set_edges()
-        
+
     def _repr_(self):
         """
         Returns a string representation of a ``GraphPlot`` object.
@@ -198,7 +318,7 @@
         is called by the constructor but can also be called to make updates to
         the vertex options of an existing ``GraphPlot`` object.  Note that the
         changes are cumulative.
-        
+
         EXAMPLES::
 
             sage: g = Graph({}, loops=True, multiedges=True, sparse=True)
@@ -303,14 +423,15 @@
             for v in self._nodelist:
                 self._plot_components['vertex_labels'].append(text(str(v),
                     self._pos[v], rgbcolor=(0,0,0), zorder=8))
-    
+
     def set_edges(self, **edge_options):
         """
         Sets the edge (or arrow) plotting parameters for the ``GraphPlot`` object.
+
         This function is called by the constructor but can also be called to make
         updates to the vertex options of an existing ``GraphPlot`` object.  Note
         that the changes are cumulative.
-        
+
         EXAMPLES::
 
             sage: g = Graph({}, loops=True, multiedges=True, sparse=True)
@@ -321,7 +442,7 @@
             sage: GP.plot()
             sage: GP.set_edges(edge_color='black')
             sage: GP.plot()
-            
+
             sage: d = DiGraph({}, loops=True, multiedges=True, sparse=True)
             sage: d.add_edges([(0,0,'a'),(0,0,'b'),(0,1,'c'),(0,1,'d'),
             ...     (0,1,'e'),(0,1,'f'),(0,1,'f'),(2,1,'g'),(2,2,'h')])
@@ -332,7 +453,7 @@
             sage: GP.plot()
 
         TESTS::
-        
+
             sage: G = Graph("Fooba")
             sage: G.show(edge_colors={'red':[(3,6),(2,5)]})
 
@@ -355,26 +476,25 @@
             ...           vn = vector(((x-(vx[v0]+vx[v1])/2.),y-(vy[v0]+vy[v1])/2.)).norm()
             ...           assert vn < tol
 
-
         """
         for arg in edge_options:
             self._options[arg] = edge_options[arg]
         if 'edge_colors' in edge_options: self._options['color_by_label'] = False
-        
+
         # Handle base edge options: thickness, linestyle
         eoptions={}
         if 'edge_style' in self._options:
             eoptions['linestyle'] = self._options['edge_style']
         if 'thickness' in self._options:
             eoptions['thickness'] = self._options['thickness']
-            
+
         # Set labels param to add labels on the fly
         labels = False
         if self._options['edge_labels']:
             labels = True
             self._plot_components['edge_labels'] = []
 
-        # Make dict collection of all edges (keep label and edge color)           
+        # Make dict collection of all edges (keep label and edge color)
         edges_to_draw = {}
         if self._options['color_by_label'] or isinstance(self._options['edge_colors'], dict):
             if self._options['color_by_label']: edge_colors = self._graph._color_by_label()
@@ -383,8 +503,8 @@
                 for edge in edge_colors[color]:
                     key = tuple(sorted([edge[0],edge[1]]))
                     if key == (edge[0],edge[1]): head = 1
-                    else: head = 0 
-                    
+                    else: head = 0
+
                     if len(edge) < 3:
                         label = self._graph.edge_label(edge[0],edge[1])
                         if isinstance(label, list):
@@ -396,7 +516,7 @@
                                 edges_to_draw[key].append((label[-1], color, head))
                     else:
                         label = edge[2]
-                        
+
                     if key in edges_to_draw:
                         edges_to_draw[key].append((label, color, head))
                     else:
@@ -413,23 +533,23 @@
                             break
                 if not specified:
                     if key == (edge[0],edge[1]): head = 1
-                    else: head = 0 
+                    else: head = 0
                     edges_to_draw[key] = [(label, 'black', head)]
         else:
             for edge in self._graph.edges(sort=True):
                 key = tuple(sorted([edge[0],edge[1]]))
                 if key == (edge[0],edge[1]): head = 1
-                else: head = 0 
+                else: head = 0
                 if key in edges_to_draw:
                     edges_to_draw[key].append((edge[2], self._options['edge_color'], head))
                 else:
                     edges_to_draw[key] = [(edge[2], self._options['edge_color'], head)]
-                
+
         if edges_to_draw:
             self._plot_components['edges'] = []
         else:
             return
-                        
+
         # Check for multi-edges or loops
         if self._arcs or self._loops:
             tmp = edges_to_draw.copy()
@@ -439,7 +559,7 @@
             from sage.functions.all import sqrt
             for (a,b) in tmp:
                 if a == b:
-                    # Loops 
+                    # Loops
                     distance = dist
                     local_labels = edges_to_draw.pop((a,b))
                     if len(local_labels)*dist > max_dist:
@@ -559,14 +679,20 @@
         elif D[1] > 0:
             theta = pi/2
         return ([VR*cos(theta)+A[0], VR*sin(theta)+A[1]], [(R-VR)*cos(theta)+A[0], (R-VR)*sin(theta)+A[1]])
-        
+
     def show(self, **kwds):
         """
         Shows the (Di)Graph associated with this ``GraphPlot`` object.
-        
+
         For syntax and lengthy documentation, see :meth:`GraphPlot.plot`.
-        Any options not used by plot will be passed on to the
-        :meth:`~sage.plot.plot.Graphics.show` method.
+
+        .. NOTE::
+
+            - See :mod:`the module's documentation <sage.graphs.graph_plot>` for
+              information on default values of this method.
+
+            - Any options not used by plot will be passed on to the
+              :meth:`~sage.plot.plot.Graphics.show` method.
 
         EXAMPLE::
 
@@ -574,114 +700,21 @@
             sage: P = C.graphplot(vertex_labels=False, vertex_size=0, graph_border=True)
             sage: P.show()
         """
+        # Setting the default values if needed
+        for k,value in DEFAULT_SHOW_OPTIONS.iteritems():
+            if k not in kwds:
+                kwds[k] = value
+
         self.plot().show(**kwds)
-        
+
     def plot(self, **kwds):
         """
         Returns a graphics object representing the (di)graph.
-        
-        INPUT:
 
-        - ``pos`` -- an optional positioning dictionar
+        .. NOTE::
 
-        - ``layout`` -- what kind of layout to use, takes precedence over ``pos``
-
-          - 'circular' -- plots the graph with vertices evenly distributed
-            on a circle
-
-          - 'spring' -- uses the traditional spring layout, using the
-            graph's current positions as initial positions
-
-          - 'tree' -- the (di)graph must be a tree. One can specify the root
-            of the tree using the keyword ``tree_root``, otherwise a root
-            will be selected at random. Then the tree will be plotted in
-            levels, depending on minimum distance for the root.
-
-        - ``vertex_labels`` -- whether to print vertex labels
-
-        - ``edge_labels`` -- whether to print edge labels. By default, ``False``,
-          but if ``True``, the result of ``str(l)`` is printed on the edge for
-          each label l. Labels equal to None are not printed (to set edge
-          labels, see :meth:`~sage.graphs.generic_graph.GenericGraph.set_edge_label`).
-
-        - ``vertex_size`` -- size of vertices displayed
-
-        - ``vertex_shape`` -- the shape to draw the vertices (Not available for
-          multiedge digraphs.
-
-        - ``graph_border`` -- whether to include a box around the graph
-
-        - ``vertex_colors`` -- optional dictionary to specify vertex colors: each
-          key is a color recognizable by matplotlib, and each corresponding
-          entry is a list of vertices. If a vertex is not listed, it looks
-          invisible on the resulting plot (it doesn't get drawn).
-
-        - ``edge_colors`` -- a dictionary specifying edge colors: each key is a
-          color recognized by matplotlib, and each entry is a list of edges.
-
-        - ``partition`` -- a partition of the vertex set. if specified, plot will
-          show each cell in a different color. vertex_colors takes precedence.
-
-        - ``talk`` -- if ``True``, prints large vertices with white backgrounds
-          so that labels are legible on slides
-
-        - ``iterations`` -- how many iterations of the spring layout algorithm to
-          go through, if applicable
-
-        - ``color_by_label`` -- if ``True``, color edges by their labels
-
-        - ``heights`` -- if specified, this is a dictionary from a set of
-          floating point heights to a set of vertices
-
-        - ``edge_style`` -- keyword arguments passed into the
-          edge-drawing routine.  This currently only works for
-          directed graphs, since we pass off the undirected graph to
-          networkx
-
-        - ``tree_root`` -- a vertex of the tree to be used as the root for
-          the ``layout="tree"`` option. If no root is specified, then one
-          is chosen at random. Ignored unless ``layout='tree'``.
-
-        - ``tree_orientation`` -- "up" or "down" (default is "down").
-          If "up" (resp., "down"), then the root of the tree will
-          appear on the bottom (resp., top) and the tree will grow
-          upwards (resp. downwards). Ignored unless ``layout='tree'``.
-
-        - ``save_pos`` -- save position computed during plotting
-
-        EXAMPLES:
-
-        Let's list all possible options::
-
-            sage: from sage.graphs.graph_plot import graphplot_options
-            sage: list(sorted(graphplot_options.iteritems()))
-            [('by_component', 'Whether to do the spring layout by connected component -- a boolean.'),
-             ('color_by_label', 'Whether or not to color the edges by their label values.'),
-             ('dim', 'The dimension of the layout -- 2 or 3.'),
-             ('dist', 'The distance between multiedges.'),
-             ('edge_color', 'The default color for edges.'),
-             ('edge_colors', 'Dictionary of edge coloring.'),
-             ('edge_labels', 'Whether or not to draw edge labels.'),
-             ('edge_style', 'The linestyle of the edges-- one of "solid", "dashed", "dotted", dashdot".'),
-             ('graph_border', 'Whether or not to draw a frame around the graph.'),
-             ('heights', 'A dictionary mapping heights to the list of vertices at this height.'),
-             ('iterations', 'The number of times to execute the spring layout algorithm.'),
-             ('layout', 'A layout algorithm -- one of "acyclic", "circular", "ranked", "graphviz", "planar", "spring", or "tree".'),
-             ('loop_size', 'The radius of the smallest loop.'),
-             ('max_dist', 'The max distance range to allow multiedges.'),
-             ('partition', 'A partition of the vertex set.  (Draws each cell of vertices in a different color).'),
-             ('pos', 'The position dictionary of vertices'),
-             ('prog', 'Which graphviz layout program to use -- one of "circo", "dot", "fdp", "neato", or "twopi".'),
-             ('save_pos', 'Whether or not to save the computed position for the graph.'),
-             ('spring', 'Use spring layout to finalize the current layout.'),
-             ('talk', 'Whether to display the vertices in talk mode (larger and white)'),
-             ('tree_orientation', 'The direction of tree branches -- "up" or "down".'),
-             ('tree_root', 'A vertex designation for drawing trees.'),
-             ('vertex_colors', 'Dictionary of vertex coloring.'),
-             ('vertex_labels', 'Whether or not to draw vertex labels.'),
-             ('vertex_shape', 'The shape to draw the vertices, Currently unavailable for Multi-edged DiGraphs.'),
-             ('vertex_size', 'The size to draw the vertices.')]
-
+            See :mod:`the module's documentation <sage.graphs.graph_plot>` for
+            information on default values of this method.
 
         We can specify some pretty precise plotting of familiar graphs::
 
@@ -720,7 +753,6 @@
             ...    D.set_edge_label(u,v,'(' + str(u) + ',' + str(v) + ')')
             sage: D.graphplot(edge_labels=True, layout='circular').show()
 
-
         This example shows off the coloring of edges::
 
             sage: from sage.plot.colors import rainbow
@@ -754,7 +786,7 @@
 
             sage: D = DiGraph({0:[0,1], 1:[2], 2:[3]}, loops=True)
             sage: D.show()
-            sage: D.show(edge_colors={(0,1,0):[(0,1,None),(1,2,None)],(0,0,0):[(2,3,None)]}) 
+            sage: D.show(edge_colors={(0,1,0):[(0,1,None),(1,2,None)],(0,0,0):[(2,3,None)]})
 
         More options::
 
@@ -806,18 +838,32 @@
 
             sage: D = DiGraph({0:[1,2,3], 2:[1,4], 3:[0]})
             sage: D.graphplot().show()
-            
+
             sage: D = DiGraph(multiedges=True, sparse=True)
             sage: for i in range(5):
             ...     D.add_edge((i,i+1,'a'))
             ...     D.add_edge((i,i-1,'b'))
             sage: D.graphplot(edge_labels=True,edge_colors=D._color_by_label()).plot()
-            
+
             sage: g = Graph({}, loops=True, multiedges=True, sparse=True)
             sage: g.add_edges([(0,0,'a'),(0,0,'b'),(0,1,'c'),(0,1,'d'),
             ...     (0,1,'e'),(0,1,'f'),(0,1,'f'),(2,1,'g'),(2,2,'h')])
             sage: g.graphplot(edge_labels=True, color_by_label=True, edge_style='dashed').plot()
+
+        Wrong input (any input) :trac:`13891`::
+
+            sage: graphs.PetersenGraph().graphplot().plot(aertataert=346345345)
+            doctest:...: DeprecationWarning: This method takes no argument ! You may want to give it as an argument to graphplot instead.
+            See http://trac.sagemath.org/13891 for details.
+            <BLANKLINE>
         """
+        # This method takes NO input
+        # This has been added in early 2013. Remove it before my death, please.
+        if kwds:
+            from sage.misc.superseded import deprecation
+            deprecation(13891, "This method takes no argument ! You may want "
+                               "to give it as an argument to graphplot instead.")
+
         G = Graphics()
         for comp in self._plot_components.values():
             if not isinstance(comp, list):
@@ -825,6 +871,7 @@
             else:
                 for item in comp:
                     G += item
+
         G.set_axes_range(*(self._graph._layout_bounding_box(self._pos)))
         if self._options['graph_border']:
             xmin = G.xmin()
@@ -846,17 +893,16 @@
         Compute a nice layout of a tree.
 
         INPUT:
-        
+
         - ``root`` -- the root vertex.
-        
+
         - ``orientation`` -- Whether to place the root
           at the top or at the bottom :
 
-            - ``orientation="down"`` -- children are placed below 
+            - ``orientation="down"`` -- children are placed below
               their parent
             - ``orientation="top"`` -- children are placed above
               their parent
-        
 
         EXAMPLES::
 
@@ -950,7 +996,7 @@
 
 def _circle_embedding(g, vertices, center=(0, 0), radius=1, shift=0):
     r"""
-    Set some vertices on a circle in the embedding of a graph G.
+    Sets some vertices on a circle in the embedding of a graph G.
 
     This method modifies the graph's embedding so that the vertices
     listed in ``vertices`` appear in this ordering on a circle of given
diff --git a/sage/modular/arithgroup/arithgroup_perm.py b/sage/modular/arithgroup/arithgroup_perm.py
--- a/sage/modular/arithgroup/arithgroup_perm.py
+++ b/sage/modular/arithgroup/arithgroup_perm.py
@@ -1290,7 +1290,7 @@
             res.plot.options['edge_labels'] = True
 
         return res
-      
+
     def generalised_level(self):
         r"""
         Return the generalised level of this subgroup.
