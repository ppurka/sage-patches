# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1374221659 -28800
# Node ID 35635a38129c77223e13ffdda5fadd40a4db9aa7
# Parent  5d8c13e7b81a1e152855073f97a4d48ee97255d1
Remove the notes about noninteger log base

diff --git a/sage/plot/graphics.py b/sage/plot/graphics.py
--- a/sage/plot/graphics.py
+++ b/sage/plot/graphics.py
@@ -1465,11 +1465,6 @@
               ``base`` is set to, it will default to 10 and will remain
               unused.
 
-            - Although it is possible to provide a noninteger ``base``, the
-              tick labeling and formatting is not ideal. Hence, in case you
-              do use noninteger ``base`` for the logarithm, then provide
-              your own tick formatter using the option ``tick_formatter``.
-
         - ``typeset`` -- (default: ``"default"``) string. The type of
           font rendering that should be used for the text. The possible
           values are
@@ -1552,15 +1547,14 @@
 
         The scale can be also given as a 2-tuple or a 3-tuple.::
 
-            sage: G.show(scale=('loglog', 2)) # both x and y axes in base 2
+            sage: G.show(scale=('loglog', 2.1)) # both x and y axes in base 2.1
 
         ::
 
             sage: G.show(scale=('loglog', 2, 3)) # x in base 2, y in base 3
 
         The base need not be an integer, though it does have to be made
-        a float.  Also, currently the formatting is wrong for non-integer bases,
-        such as in this example::
+        a float.::
 
             sage: G.show(scale='semilogx', base=float(e)) # base is e
 
diff --git a/sage/plot/plot.py b/sage/plot/plot.py
--- a/sage/plot/plot.py
+++ b/sage/plot/plot.py
@@ -654,11 +654,6 @@
         - If the ``scale`` is ``"linear"``, then irrespective of what
           ``base`` is set to, it will default to 10 and will remain unused.
 
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
         - If you want to limit the plot along the horizontal axis in the
           final rendered figure, then pass the ``xmin`` and ``xmax``
           keywords to the :meth:`~sage.plot.graphics.Graphics.show` method.
@@ -1808,20 +1803,13 @@
 
     For all other inputs, look at the documentation of :func:`plot`.
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
     EXAMPLES::
 
         sage: plot_loglog(exp, (1,10)) # plot in loglog scale with base 10
 
     ::
 
-        sage: plot_loglog(exp, (1,10), base=2) # with base 2 on both axes
+        sage: plot_loglog(exp, (1,10), base=2.1) # with base 2.1 on both axes
 
     ::
 
@@ -1845,13 +1833,6 @@
 
     For all other inputs, look at the documentation of :func:`plot`.
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
     EXAMPLES::
 
         sage: plot_semilogx(exp, (1,10)) # plot in semilogx scale, base 10
@@ -1878,13 +1859,6 @@
 
     For all other inputs, look at the documentation of :func:`plot`.
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
     EXAMPLES::
 
         sage: plot_semilogy(exp, (1,10)) # plot in semilogy scale, base 10
@@ -1912,13 +1886,6 @@
     For all other inputs, look at the documentation of :func:`list_plot`.
 
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
     EXAMPLES::
 
         sage: yl = [5**k for k in range(10)]; xl = [2**k for k in range(10)]
@@ -1926,7 +1893,7 @@
 
     ::
 
-        sage: list_plot_loglog(zip(xl, yl), base=2) # with base 2 on both axes
+        sage: list_plot_loglog(zip(xl, yl), base=2.1) # with base 2.1 on both axes
 
     ::
 
@@ -1964,14 +1931,6 @@
 
     For all other inputs, look at the documentation of :func:`list_plot`.
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
-
     EXAMPLES::
 
         sage: yl = [2**k for k in range(12)]
@@ -2012,13 +1971,6 @@
 
     For all other inputs, look at the documentation of :func:`list_plot`.
 
-    .. note::
-
-        - Although it is possible to provide a noninteger ``base``, the
-          tick labeling and formatting is not ideal. Hence, in case you do
-          use noninteger ``base`` for the logarithm, then provide your own
-          tick formatter using the option ``tick_formatter``.
-
     EXAMPLES::
 
         sage: yl = [2**k for k in range(12)]
