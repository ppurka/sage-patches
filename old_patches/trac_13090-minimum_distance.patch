# HG changeset patch
# User Punarbasu Purkayastha <ppurka@gmail.com>
# Date 1338974175 -28800
# Node ID e1622517868cf2f18efb79efc85c989a736a641b
# Parent  8c16c23faac0e48277d86b528fd83913982a322d
allow LinearCode to take minimum distance as a parameter
  - this allows us to store the minimum distance computations, once done
  - also, we can provide the minimum distance in the initialization of known codes
  - algorithm="gap" parameter is introduced to recompute the minimum distance if so desired.

diff --git a/sage/coding/code_constructions.py b/sage/coding/code_constructions.py
--- a/sage/coding/code_constructions.py
+++ b/sage/coding/code_constructions.py
@@ -576,7 +576,9 @@
         sage: C = BinaryGolayCode()
         sage: C
         Linear code of length 23, dimension 12 over Finite Field of size 2
-        sage: C.minimum_distance()               # long time
+        sage: C.minimum_distance()
+        7
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=7
         7
     
     AUTHORS:
@@ -599,7 +601,7 @@
     # MS = MatrixSpace(F,12,23)
     # V = VectorSpace(F,23)
     V = span(B, F)
-    return LinearCodeFromVectorSpace(V)
+    return LinearCodeFromVectorSpace(V, d=7)
 
 
 def CyclicCodeFromGeneratingPolynomial(n,g,ignore=True):
@@ -825,9 +827,11 @@
         sage: C = ExtendedBinaryGolayCode()
         sage: C
         Linear code of length 24, dimension 12 over Finite Field of size 2
-        sage: C.minimum_distance()              
+        sage: C.minimum_distance()
         8
-    
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=8
+        8
+
     AUTHORS:
 
     - David Joyner (2007-05)
@@ -845,7 +849,7 @@
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1],\
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]]
     V = span(B, GF(2))
-    return LinearCodeFromVectorSpace(V)
+    return LinearCodeFromVectorSpace(V, d=8)
     # C = BinaryGolayCode()
     # return C.extended_code()
 
@@ -904,7 +908,9 @@
         Linear code of length 12, dimension 6 over Finite Field of size 3
         sage: C.minimum_distance()
         6
-    
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=6
+        6
+
     AUTHORS:
 
     - David Joyner (11-2005)
@@ -916,7 +922,7 @@
          [0, 0, 0, 0, 1, 0, 2, 1, 2, 2, 0, 1],\
          [0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 2, 1]]
     V = span(B, GF(3))
-    return LinearCodeFromVectorSpace(V)
+    return LinearCodeFromVectorSpace(V, d=6)
     # C = TernaryGolayCode()
     # return C.extended_code()
 
@@ -950,6 +956,8 @@
         Linear code of length 13, dimension 10 over Finite Field of size 3
         sage: C.minimum_distance()
         3
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=3
+        3
         sage: C = HammingCode(3,GF(4,'a')); C
         Linear code of length 21, dimension 18 over Finite Field in a of size 2^2
     """
@@ -961,7 +969,8 @@
     PFn = [list(p) for p in X.point_set(F).points(F)]
     H = MS(PFn).transpose()
     Cd = LinearCode(H)
-    return Cd.dual_code()
+    # Hamming code always has distance 3, so we provide the distance.
+    return LinearCode(Cd.dual_code().gen_mat(), d=3)
 
 
 def LinearCodeFromCheckMatrix(H):
@@ -1220,6 +1229,8 @@
         Linear code of length 6, dimension 4 over Finite Field in a of size 2^3
         sage: C.minimum_distance()
         3
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=n-k+1
+        3
         sage: F.<a> = GF(3^2,"a")
         sage: pts = [0,1,a,a^2,2*a,2*a+1]
         sage: len(Set(pts)) == 6 # to make sure there are no duplicates
@@ -1228,7 +1239,7 @@
         Linear code of length 6, dimension 4 over Finite Field in a of size 3^2
         sage: C.minimum_distance()
         3
-    
+
     REFERENCES:
 
     - [W] http://en.wikipedia.org/wiki/Reed-Solomon
@@ -1250,7 +1261,7 @@
     rowsG = []
     rowsG = [[power(x,j,F) for x in pts] for j in range(k)]
     G = MS(rowsG)
-    return LinearCode(G)
+    return LinearCode(G, d=n-k+1)
 
 
 def TernaryGolayCode():
@@ -1266,7 +1277,9 @@
         Linear code of length 11, dimension 6 over Finite Field of size 3
         sage: C.minimum_distance()
         5
-    
+        sage: C.minimum_distance(algorithm='gap') # long time, check d=5
+        5
+
     AUTHORS:
 
     - David Joyner (2007-5)
@@ -1279,7 +1292,7 @@
          [0, 0, 0, 0, 2, 0, 1, 2, 1, 1, 0],\
          [0, 0, 0, 0, 0, 2, 0, 1, 2, 1, 1]]
     V = span(B, F)
-    return LinearCodeFromVectorSpace(V)
+    return LinearCodeFromVectorSpace(V, d=5)
 
 def ToricCode(P,F):
     r"""
@@ -1379,11 +1392,15 @@
         Linear code of length 8, dimension 3 over Finite Field of size 2
         sage: C.spectrum()
         [1, 0, 0, 0, 7, 0, 0, 0, 0]
-    
+        sage: C.minimum_distance()
+        4
+        sage: C.minimum_distance(algorithm='gap') # check d=2^(m-1)
+        4
+
     REFERENCES:
 
     - http://en.wikipedia.org/wiki/Hadamard_matrix
 
     - http://en.wikipedia.org/wiki/Walsh_code
     """
-    return LinearCode(walsh_matrix(m))
+    return LinearCode(walsh_matrix(m), d=2**(m-1))
diff --git a/sage/coding/linear_code.py b/sage/coding/linear_code.py
--- a/sage/coding/linear_code.py
+++ b/sage/coding/linear_code.py
@@ -161,7 +161,7 @@
 - Kwankyu Lee (2010-01): added methods gen_mat_systematic, information_set, and
   magma interface for linear codes.
 
-- Niles Johnson (2010-08): Trac #3893: ``random_element()`` should pass on ``*args`` and ``**kwds``.
+- Niles Johnson (2010-08): :trac:`#3893`: ``random_element()`` should pass on ``*args`` and ``**kwds``.
 
 TESTS::
 
@@ -689,6 +689,13 @@
        finite ring but the matrices over that ring must have certain
        attributes, such as ``rank``.)
 
+    - ``d`` - (Optional, default: ``None``) the minimum distance of the
+      code. This is an optional parameter.
+
+    .. note::
+        The veracity of the minimum distance ``d``, if provided, is not
+        checked.
+
     OUTPUT:
 
     The linear code of length `n` over `F` having `G` as a generator matrix.
@@ -712,6 +719,16 @@
         [1, 0, 0, 7, 7, 0, 0, 1]
         sage: C.weight_distribution()
         [1, 0, 0, 7, 7, 0, 0, 1]
+
+    The minimum distance of the code, if known, can be provided as an
+    optional parameter.::
+
+        sage: C  = LinearCode(G, d=3)
+        sage: C.minimum_distance()
+        3
+
+    Another example.::
+
         sage: MS = MatrixSpace(GF(5),4,7)
         sage: G  = MS([[1,1,1,0,0,0,0], [1,0,0,1,1,0,0], [0,1,0,1,0,1,0], [1,1,0,1,0,0,1]])
         sage: C  = LinearCode(G)
@@ -726,7 +743,7 @@
     #    3
     #    sage: C.minimum_distance_why()     # optional (net connection)
     #    Ub(7,4) = 3 follows by the Griesmer bound.
-    def __init__(self, gen_mat):
+    def __init__(self, gen_mat, d=None):
         r"""
         See the docstring for :meth:`LinearCode`.
 
@@ -737,6 +754,13 @@
             sage: C  = LinearCode(G)    # indirect doctest
             sage: C
             Linear code of length 7, dimension 4 over Finite Field of size 2
+
+        The minimum distance of the code, if known, can be provided as an
+        optional parameter.::
+
+            sage: C  = LinearCode(G, d=3)
+            sage: C.minimum_distance()
+            3
         """
         base_ring = gen_mat[0,0].parent()
         ParentWithGens.__init__(self, base_ring)
@@ -744,6 +768,7 @@
         self.__gen_mat = gen_mat
         self.__length = len(gen_mat.row(0))
         self.__dim = gen_mat.rank()
+        self.__distance = d
 
     def _repr_(self):
         r"""
@@ -1837,10 +1862,16 @@
         Raises a ``ValueError`` in case there is no non-zero vector in this
         linear code.
 
+        The minimum distance of the code is stored once it has been
+        computed or provided during the initialization of :class:`LinearCode`.
+        If ``algorithm`` is ``None`` and the stored value of minimum
+        distance is found, then the stored value will be returned without
+        recomputing the minimum distance again.
+
         INPUT:
 
-        - ``algorithm`` - Method to be used, ``None`` or ``"guava"``
-          (default: ``None``)
+        - ``algorithm`` - Method to be used, ``None``, ``"gap"``, or
+          ``"guava"`` (default: ``None``).
 
         OUTPUT:
 
@@ -1853,14 +1884,38 @@
             sage: C = LinearCode(G)
             sage: C.minimum_distance()
             3
+
+        Once the minimum distance has been computed, it's value is stored.
+        Hence the following command will return the value instantly,
+        without further computations.::
+
+            sage: C.minimum_distance()
+            3
+
+        If ``algorithm`` is provided, then the minimum distance will be
+        recomputed even if there is a stored value from a previous run.::
+
+            sage: C.minimum_distance(algorithm="gap")
+            3
             sage: C.minimum_distance(algorithm="guava")  # requires optional GAP package Guava
             3
+
+        Another example.::
+
             sage: C = HammingCode(2,GF(4,"a")); C
             Linear code of length 5, dimension 3 over Finite Field in a of size 2^2
             sage: C.minimum_distance()
             3
 
-        This shows that trac ticket #6486 has been resolved::
+        TESTS::
+
+            sage: C = HammingCode(2,GF(4,"a"))
+            sage: C.minimum_distance(algorithm='something')
+            Traceback (most recent call last):
+            ...
+            ValueError: The algorithm argument must be one of None, 'gap' or 'guava'; got 'something'
+
+        This shows that ticket :trac:`#6486` has been resolved::
 
             sage: G = matrix(GF(2),[[0,0,0]])
             sage: C = LinearCode(G)
@@ -1871,7 +1926,16 @@
         """
         # Special code to handle the case where there is no non-zero vector.
         if self.dimension() == 0:
-            raise ValueError, "this linear code contains no non-zero vector"
+            raise ValueError("this linear code contains no non-zero vector")
+
+        # If the minimum distance has already been computed or provided by
+        # the user then simply return the stored value.
+        # This is done only if algorithm is None.
+        if self.__distance is not None and algorithm is None:
+            return self.__distance
+        if algorithm not in (None, "gap", "guava"):
+            raise ValueError("The algorithm argument must be one of None, "
+                        "'gap' or 'guava'; got '{0}'".format(algorithm))
 
         #sage: C.minimum_distance_upper_bound()  # optional (net connection)
         #5
@@ -1889,7 +1953,8 @@
             #print "Running Guava's MinimumWeight ...\n"
             return ZZ(d)
         Gstr = "%s*Z(%s)^0"%(gapG, q)
-        return hamming_weight(min_wt_vec_gap(Gstr,n,k,F))
+        self.__distance = hamming_weight(min_wt_vec_gap(Gstr,n,k,F))
+        return self.__distance
 
     def module_composition_factors(self, gp):
         r"""
@@ -2728,10 +2793,21 @@
 
     weight_distribution = spectrum
 
-def LinearCodeFromVectorSpace(self):
+def LinearCodeFromVectorSpace(V, d=None):
     """
     Simply converts a vector subspace `V` of `GF(q)^n` into a `LinearCode`.
 
+    INPUT:
+
+    - ``V`` -- The vector space
+
+    - ``d`` -- (Optional, default: ``None``) the minimum distance of the
+      code, if known. This is an optional parameter.
+
+    .. note::
+        The veracity of the minimum distance ``d``, if provided, is not
+        checked.
+
     EXAMPLES::
 
         sage: V = VectorSpace(GF(2), 8)
@@ -2742,12 +2818,18 @@
         [0 0 0 0 1 1 1 1]
         sage: C.minimum_distance()
         4
+
+    Here, we provide the minimum distance of the code.::
+
+        sage: C = LinearCodeFromVectorSpace(L, d=4)
+        sage: C.minimum_distance()
+        4
     """
-    F = self.base_ring()
-    B = self.basis()
+    F = V.base_ring()
+    B = V.basis()
     n = len(B[0].list())
     k = len(B)
     MS = MatrixSpace(F,k,n)
     G = MS([B[i].list() for i in range(k)])
-    return LinearCode(G)
-
+    return LinearCode(G, d=d)
+
